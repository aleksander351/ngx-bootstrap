{"ast":null,"code":"import { DemoDropdownBasicComponent } from './demos/basic/basic';\nimport { DemoDropdownAnchorTriggerComponent } from './demos/anchor-trigger/anchor-trigger';\nimport { DemoDropdownSplitComponent } from './demos/split/split';\nimport { DemoDropdownTriggersManualComponent } from './demos/triggers-manual/triggers-manual';\nimport { DemoDropdownByIsOpenPropComponent } from './demos/trigger-by-isopen-property/trigger-by-isopen-property';\nimport { DemoDropdownDisabledComponent } from './demos/disabled-menu/disabled-menu';\nimport { DemoDropdownDisabledItemComponent } from './demos/disabled-item/disabled-item';\nimport { DemoDropdownAlignmentComponent } from './demos/alignment/menu-alignment';\nimport { DemoNestedDropdownsComponent } from './demos/nested-dropdowns/nested-dropdowns';\nimport { DemoDropdownContainerComponent } from './demos/container/container';\nimport { DemoDropdownDropupComponent } from './demos/dropup/dropup';\nimport { DemoDropdownMenuDividersComponent } from './demos/menu-dividers/menu-dividers';\nimport { DemoDropdownConfigComponent } from './demos/config/config';\nimport { DemoDropdownVisibilityEventsComponent } from './demos/visibility-events/visibility-events';\nimport { DemoDropdownStateChangeEventComponent } from './demos/state-change-event/state-change-event';\nimport { DemoDropdownAutoCloseComponent } from './demos/autoclose/autoclose';\nimport { DemoDropdownCustomHtmlComponent } from './demos/custom-html/custom-html';\nimport { DemoAccessibilityComponent } from './demos/accessibility/accessibility';\nimport { DemoDropdownInsideClickComponent } from './demos/inside-click/inside-click';\nimport { ExamplesComponent } from '@ngx-bootstrap-doc/docs';\nimport { ApiSectionsComponent } from '@ngx-bootstrap-doc/docs';\nimport { NgApiDocComponent, NgApiDocConfigComponent } from '@ngx-bootstrap-doc/docs';\nimport { DemoDropdownAnimatedComponent } from './demos/animated/animated';\nexport const demoComponentContent = [{\n  name: 'Overview',\n  anchor: 'overview',\n  tabName: 'overview',\n  outlet: ExamplesComponent,\n  description: `<p>Wrap the dropdown’s toggle (your button or link) and the dropdown menu within\n      <code>dropdown</code>. Dropdowns can be triggered from <code> &lt;a&gt;</code> or <code> &lt;button&gt;</code>\n      elements to better fit your potential needs.</p>`,\n  content: [{\n    title: 'Basic',\n    anchor: 'basic',\n    component: require('!!raw-loader!./demos/basic/basic.ts'),\n    html: require('!!raw-loader!./demos/basic/basic.html'),\n    description: `<p>Any <code>&lt;button&gt;</code> can became a dropdown toggle with few markup changes.\n          Here’s how dropdown works with single button</p>`,\n    outlet: DemoDropdownBasicComponent\n  }, {\n    title: 'With animation',\n    anchor: 'animated',\n    component: require('!!raw-loader!./demos/animated/animated'),\n    html: require('!!raw-loader!./demos/animated/animated.html'),\n    description: `You can enable animation via <code>isAnimated</code> input or config option`,\n    outlet: DemoDropdownAnimatedComponent\n  }, {\n    title: 'Trigger by tag <a>',\n    anchor: 'anchor-trigger',\n    component: require('!!raw-loader!./demos/anchor-trigger/anchor-trigger.ts'),\n    html: require('!!raw-loader!./demos/anchor-trigger/anchor-trigger.html'),\n    outlet: DemoDropdownAnchorTriggerComponent\n  }, {\n    title: 'Split button dropdowns',\n    anchor: 'split-button',\n    component: require('!!raw-loader!./demos/split/split.ts'),\n    html: require('!!raw-loader!./demos/split/split.html'),\n    description: `<p>Similarly, create split button dropdowns with virtually the same markup as single\n          button dropdowns, but with the addition of <code>.dropdown-toggle-split</code> for proper spacing\n          around the dropdown caret.</p>`,\n    outlet: DemoDropdownSplitComponent\n  }, {\n    title: 'Manual triggering',\n    anchor: 'triggers-manual',\n    component: require('!!raw-loader!./demos/triggers-manual/triggers-manual.ts'),\n    html: require('!!raw-loader!./demos/triggers-manual/triggers-manual.html'),\n    description: `<p>Dropdown can be triggered by <code>show</code>, <code>hide</code> and\n          <code>toggle</code> methods from directive\n          <br>\n          Use method <code>toggle(true)</code> if you want to toggle the dropdown or <code>toggle(false)</code>\n          if you want to only close opened dropdown.\n          </p>`,\n    outlet: DemoDropdownTriggersManualComponent\n  }, {\n    title: 'Trigger by isOpen property',\n    anchor: 'trigger-by-isopen-property',\n    component: require('!!raw-loader!./demos/trigger-by-isopen-property/trigger-by-isopen-property.ts'),\n    html: require('!!raw-loader!./demos/trigger-by-isopen-property/trigger-by-isopen-property.html'),\n    description: `<p>Dropdown can be shown or hidden by changing <code>isOpen</code> input property</p>`,\n    outlet: DemoDropdownByIsOpenPropComponent\n  }, {\n    title: 'Disabled menu',\n    anchor: 'disabled-menu',\n    component: require('!!raw-loader!./demos/disabled-menu/disabled-menu.ts'),\n    html: require('!!raw-loader!./demos/disabled-menu/disabled-menu.html'),\n    description: `<p>Use <code>isDisabled</code> property to make dropdown disabled.</p>`,\n    outlet: DemoDropdownDisabledComponent\n  }, {\n    title: 'Mark item as disabled',\n    anchor: 'disabled-item',\n    component: require('!!raw-loader!./demos/disabled-item/disabled-item.ts'),\n    html: require('!!raw-loader!./demos/disabled-item/disabled-item.html'),\n    description: `<p>Add a <code>disabled</code> class to <code>&lt;a&gt;</code> for bootstrap 4 to make it as disabled.</p>\n                      <p>Add a <code>disabled</code> class to <code>&lt;li&gt;</code>  for bootstrap 3 to make it as disabled.</p>`,\n    outlet: DemoDropdownDisabledItemComponent\n  }, {\n    title: 'Menu alignment',\n    anchor: 'menu-alignment',\n    component: require('!!raw-loader!./demos/alignment/menu-alignment.ts'),\n    html: require('!!raw-loader!./demos/alignment/menu-alignment.html'),\n    description: `<p>By default, a dropdown menu is automatically positioned 100% from the top and along\n          the left side of its parent. Add class <code>.dropdown-menu-right</code> to a <code>dropdownMenu</code>\n          to right align the dropdown menu.</p>`,\n    outlet: DemoDropdownAlignmentComponent\n  }, {\n    title: 'Inside click',\n    anchor: 'inside-click',\n    component: require('!!raw-loader!./demos/inside-click/inside-click.ts'),\n    html: require('!!raw-loader!./demos/inside-click/inside-click.html'),\n    description: `<p>By default, a dropdown menu closes on document click, even if you clicked on an element inside the dropdown.\n        Use <code>[insideClick]=\"true\"</code> to allow click inside the dropdown</p>`,\n    outlet: DemoDropdownInsideClickComponent\n  }, {\n    title: 'Nested dropdowns (experimental)',\n    anchor: 'nested-dropdowns',\n    component: require('!!raw-loader!./demos/nested-dropdowns/nested-dropdowns.ts'),\n    html: require('!!raw-loader!./demos/nested-dropdowns/nested-dropdowns.html'),\n    outlet: DemoNestedDropdownsComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container',\n    component: require('!!raw-loader!./demos/container/container.ts'),\n    html: require('!!raw-loader!./demos/container/container.html'),\n    description: `<p>Append dropdown to body by adding <code>container=\"body\"</code> to the parent element.</p>`,\n    outlet: DemoDropdownContainerComponent\n  },\n  /* not availavle in bs-dropdown version\r\n  {\r\n    title: 'Single button with keyboard nav',\r\n    anchor: 'dropdown-keyboard',\r\n    component: require('!!raw-loader!./demos/keyboard/keyboard.ts'),\r\n    html: require('!!raw-loader!./demos/keyboard/keyboard.html'),\r\n    outlet: DemoDropdownKeyboardComponent\r\n  },*/\n  {\n    title: 'Dropup variation',\n    anchor: 'dropup',\n    component: require('!!raw-loader!./demos/dropup/dropup.ts'),\n    html: require('!!raw-loader!./demos/dropup/dropup.html'),\n    description: `<p>To make dropdown's menu appear above toggle element set <code>dropup</code> property as <code>true</code></p>`,\n    outlet: DemoDropdownDropupComponent\n  }, {\n    title: 'Menu dividers',\n    anchor: 'menu-dividers',\n    component: require('!!raw-loader!./demos/menu-dividers/menu-dividers.ts'),\n    html: require('!!raw-loader!./demos/menu-dividers/menu-dividers.html'),\n    description: `<p>Separate groups of related menu items with a <code>.divider</code> for bootstrap 3 and <code>.dropdown-divider</code> for bootstrap 4.</p>`,\n    outlet: DemoDropdownMenuDividersComponent\n  }, {\n    title: 'Custom html',\n    anchor: 'custom-html',\n    component: require('!!raw-loader!./demos/custom-html/custom-html.ts'),\n    html: require('!!raw-loader!./demos/custom-html/custom-html.html'),\n    description: `<p>Dropdown allows you to use any html markup inside of it</p>`,\n    outlet: DemoDropdownCustomHtmlComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'config-defaults',\n    component: require('!!raw-loader!./demos/config/config.ts'),\n    html: require('!!raw-loader!./demos/config/config.html'),\n    description: `<p>It is possible to override default dropdown config partially or completely.</p>`,\n    outlet: DemoDropdownConfigComponent\n  }, {\n    title: 'Visibility Events',\n    anchor: 'visibility-events',\n    component: require('!!raw-loader!./demos/visibility-events/visibility-events.ts'),\n    html: require('!!raw-loader!./demos/visibility-events/visibility-events.html'),\n    description: `<p>You can subscribe to dropdown's visibility events</p>`,\n    outlet: DemoDropdownVisibilityEventsComponent\n  }, {\n    title: 'State change event',\n    anchor: 'state-change-event',\n    component: require('!!raw-loader!./demos/state-change-event/state-change-event.ts'),\n    html: require('!!raw-loader!./demos/state-change-event/state-change-event.html'),\n    description: `<p>You can subscribe to dropdown's state change event (<code>isOpenChange</code>).</p>`,\n    outlet: DemoDropdownStateChangeEventComponent\n  }, {\n    title: 'Auto close',\n    anchor: 'autoclose',\n    component: require('!!raw-loader!./demos/autoclose/autoclose.ts'),\n    html: require('!!raw-loader!./demos/autoclose/autoclose.html'),\n    description: `<p>Use <code>autoClose</code> property to change dropdown's default behavior</p>`,\n    outlet: DemoDropdownAutoCloseComponent\n  }, {\n    title: 'Accessibility',\n    anchor: 'accessibility',\n    outlet: DemoAccessibilityComponent\n  }]\n}, {\n  name: 'Installation',\n  anchor: 'api-reference',\n  tabName: 'api',\n  outlet: ApiSectionsComponent,\n  usage: require('!!raw-loader!./docs/usage.md'),\n  importInfo: '<span class=\"pln\">ng add ngx</span><span class=\"pun\">-</span><span class=\"pln\">bootstrap </span> --component <span class=\"pln\">dropdowns</span>',\n  content: [{\n    title: 'BsDropdownDirective',\n    anchor: 'dropdown-directive',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'BsDropdownContainerComponent',\n    anchor: 'dropdown-container',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'BsDropdownMenuDirective',\n    anchor: 'dropdown-menu-directive',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'BsDropdownToggleDirective',\n    anchor: 'dropdown-toggle-directive',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'BsDropdownState',\n    anchor: 'BsDropdownState',\n    outlet: NgApiDocConfigComponent\n  }, {\n    title: 'BsDropdownConfig',\n    anchor: 'dropdown-config',\n    outlet: NgApiDocConfigComponent\n  }]\n}, {\n  name: 'Examples',\n  anchor: 'examples',\n  tabName: 'examples',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Basic',\n    anchor: 'basic-ex',\n    outlet: DemoDropdownBasicComponent\n  }, {\n    title: 'With animation',\n    anchor: 'animated-ex',\n    outlet: DemoDropdownAnimatedComponent\n  }, {\n    title: 'Trigger by tag <a>',\n    anchor: 'anchor-trigger-ex',\n    outlet: DemoDropdownAnchorTriggerComponent\n  }, {\n    title: 'Split button dropdowns',\n    anchor: 'split-button-ex',\n    outlet: DemoDropdownSplitComponent\n  }, {\n    title: 'Manual triggering',\n    anchor: 'triggers-manual-ex',\n    outlet: DemoDropdownTriggersManualComponent\n  }, {\n    title: 'Trigger by isOpen property',\n    anchor: 'trigger-by-isopen-property-ex',\n    outlet: DemoDropdownByIsOpenPropComponent\n  }, {\n    title: 'Disabled menu',\n    anchor: 'disabled-menu-ex',\n    outlet: DemoDropdownDisabledComponent\n  }, {\n    title: 'Mark item as disabled',\n    anchor: 'disabled-item-ex',\n    outlet: DemoDropdownDisabledItemComponent\n  }, {\n    title: 'Menu alignment',\n    anchor: 'menu-alignment-ex',\n    outlet: DemoDropdownAlignmentComponent\n  }, {\n    title: 'Inside click',\n    anchor: 'inside-click-ex',\n    outlet: DemoDropdownInsideClickComponent\n  }, {\n    title: 'Nested dropdowns (experimental)',\n    anchor: 'nested-dropdowns-ex',\n    outlet: DemoNestedDropdownsComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container-ex',\n    outlet: DemoDropdownContainerComponent\n  }, {\n    title: 'Dropup variation',\n    anchor: 'dropup-ex',\n    outlet: DemoDropdownDropupComponent\n  }, {\n    title: 'Menu dividers',\n    anchor: 'menu-dividers-ex',\n    outlet: DemoDropdownMenuDividersComponent\n  }, {\n    title: 'Custom html',\n    anchor: 'custom-html-ex',\n    outlet: DemoDropdownCustomHtmlComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'config-defaults-ex',\n    outlet: DemoDropdownConfigComponent\n  }, {\n    title: 'Visibility Events',\n    anchor: 'visibility-events-ex',\n    outlet: DemoDropdownVisibilityEventsComponent\n  }, {\n    title: 'State change event',\n    anchor: 'state-change-event-ex',\n    outlet: DemoDropdownStateChangeEventComponent\n  }, {\n    title: 'Auto close',\n    anchor: 'autoclose-ex',\n    outlet: DemoDropdownAutoCloseComponent\n  }]\n}];","map":null,"metadata":{},"sourceType":"module"}