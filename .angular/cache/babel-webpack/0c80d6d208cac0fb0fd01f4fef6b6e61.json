{"ast":null,"code":"import { ElementRef, EmbeddedViewRef, EventEmitter, Renderer2, ViewContainerRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { BsDropdownConfig } from './bs-dropdown.config';\nimport { BsDropdownContainerComponent } from './bs-dropdown-container.component';\nimport { BsDropdownState } from './bs-dropdown.state';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AnimationBuilder } from '@angular/animations';\nimport { dropdownAnimation } from './dropdown-animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/component-loader\";\nimport * as i2 from \"./bs-dropdown.state\";\nimport * as i3 from \"./bs-dropdown.config\";\nimport * as i4 from \"@angular/animations\";\nexport let BsDropdownDirective = /*#__PURE__*/(() => {\n  class BsDropdownDirective {\n    constructor(_elementRef, _renderer, _viewContainerRef, _cis, _state, _config, _builder) {\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._viewContainerRef = _viewContainerRef;\n      this._cis = _cis;\n      this._state = _state;\n      this._config = _config;\n      /**\r\n       * This attribute indicates that the dropdown should be opened upwards\r\n       */\n\n      this.dropup = false; // todo: move to component loader\n\n      this._isInlineOpen = false;\n      this._isDisabled = false;\n      this._subscriptions = [];\n      this._isInited = false; // set initial dropdown state from config\n\n      this._state.autoClose = this._config.autoClose;\n      this._state.insideClick = this._config.insideClick;\n      this._state.isAnimated = this._config.isAnimated;\n      this._state.stopOnClickPropagation = this._config.stopOnClickPropagation;\n      this._factoryDropDownAnimation = _builder.build(dropdownAnimation); // create dropdown component loader\n\n      this._dropdown = this._cis.createLoader(this._elementRef, this._viewContainerRef, this._renderer).provide({\n        provide: BsDropdownState,\n        useValue: this._state\n      });\n      this.onShown = this._dropdown.onShown;\n      this.onHidden = this._dropdown.onHidden;\n      this.isOpenChange = this._state.isOpenChange;\n    }\n    /**\r\n     * Indicates that dropdown will be closed on item or document click,\r\n     * and after pressing ESC\r\n     */\n\n\n    set autoClose(value) {\n      this._state.autoClose = value;\n    }\n\n    get autoClose() {\n      return this._state.autoClose;\n    }\n    /**\r\n     * Indicates that dropdown will be animated\r\n     */\n\n\n    set isAnimated(value) {\n      this._state.isAnimated = value;\n    }\n\n    get isAnimated() {\n      return this._state.isAnimated;\n    }\n    /**\r\n     * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\r\n     */\n\n\n    set insideClick(value) {\n      this._state.insideClick = value;\n    }\n\n    get insideClick() {\n      return this._state.insideClick;\n    }\n    /**\r\n     * Disables dropdown toggle and hides dropdown menu if opened\r\n     */\n\n\n    set isDisabled(value) {\n      this._isDisabled = value;\n\n      this._state.isDisabledChange.emit(value);\n\n      if (value) {\n        this.hide();\n      }\n    }\n\n    get isDisabled() {\n      return this._isDisabled;\n    }\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\n\n\n    get isOpen() {\n      if (this._showInline) {\n        return this._isInlineOpen;\n      }\n\n      return this._dropdown.isShown;\n    }\n\n    set isOpen(value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n\n    get isBs4() {\n      return !isBs3();\n    }\n\n    get _showInline() {\n      return !this.container;\n    }\n\n    ngOnInit() {\n      // fix: seems there are an issue with `routerLinkActive`\n      // which result in duplicated call ngOnInit without call to ngOnDestroy\n      // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n      if (this._isInited) {\n        return;\n      }\n\n      this._isInited = true; // attach DOM listeners\n\n      this._dropdown.listen({\n        // because of dropdown inline mode\n        outsideClick: false,\n        triggers: this.triggers,\n        show: () => this.show()\n      }); // toggle visibility on toggle element click\n\n\n      this._subscriptions.push(this._state.toggleClick.subscribe(value => this.toggle(value))); // hide dropdown if set disabled while opened\n\n\n      this._subscriptions.push(this._state.isDisabledChange.pipe(filter(value => value)).subscribe(() => this.hide()));\n    }\n    /**\r\n     * Opens an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\n\n\n    show() {\n      if (this.isOpen || this.isDisabled) {\n        return;\n      }\n\n      if (this._showInline) {\n        if (!this._inlinedMenu) {\n          this._state.dropdownMenu.then(dropdownMenu => {\n            this._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);\n\n            this._inlinedMenu = this._dropdown._inlineViewRef;\n            this.addBs4Polyfills();\n\n            if (this._inlinedMenu) {\n              this._renderer.addClass(this._inlinedMenu.rootNodes[0].parentNode, 'open');\n            }\n\n            this.playAnimation();\n          }) // swallow errors\n          .catch();\n        }\n\n        this.addBs4Polyfills();\n        this._isInlineOpen = true;\n        this.onShown.emit(true);\n\n        this._state.isOpenChange.emit(true);\n\n        this.playAnimation();\n        return;\n      }\n\n      this._state.dropdownMenu.then(dropdownMenu => {\n        // check direction in which dropdown should be opened\n        const _dropup = this.dropup || typeof this.dropup !== 'undefined' && this.dropup;\n\n        this._state.direction = _dropup ? 'up' : 'down';\n\n        const _placement = this.placement || (_dropup ? 'top start' : 'bottom start'); // show dropdown\n\n\n        this._dropdown.attach(BsDropdownContainerComponent).to(this.container).position({\n          attachment: _placement\n        }).show({\n          content: dropdownMenu.templateRef,\n          placement: _placement\n        });\n\n        this._state.isOpenChange.emit(true);\n      }) // swallow error\n      .catch();\n    }\n    /**\r\n     * Closes an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\n\n\n    hide() {\n      if (!this.isOpen) {\n        return;\n      }\n\n      if (this._showInline) {\n        this.removeShowClass();\n        this.removeDropupStyles();\n        this._isInlineOpen = false;\n        this.onHidden.emit(true);\n      } else {\n        this._dropdown.hide();\n      }\n\n      this._state.isOpenChange.emit(false);\n    }\n    /**\r\n     * Toggles an element’s popover. This is considered a “manual” triggering of\r\n     * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\r\n     * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\r\n     */\n\n\n    toggle(value) {\n      if (this.isOpen || !value) {\n        return this.hide();\n      }\n\n      return this.show();\n    }\n    /** @internal */\n\n\n    _contains(event) {\n      // todo: valorkin fix typings\n      return this._elementRef.nativeElement.contains(event.target) || this._dropdown.instance && this._dropdown.instance._contains(event.target);\n    }\n\n    navigationClick(event) {\n      const ref = this._elementRef.nativeElement.querySelector('.dropdown-menu');\n\n      if (!ref) {\n        return;\n      }\n\n      const firstActive = this._elementRef.nativeElement.ownerDocument.activeElement;\n      const allRef = ref.querySelectorAll('.dropdown-item');\n\n      switch (event.keyCode) {\n        case 38:\n          if (this._state.counts > 0) {\n            allRef[--this._state.counts].focus();\n          }\n\n          break;\n\n        case 40:\n          if (this._state.counts + 1 < allRef.length) {\n            if (firstActive.classList !== allRef[this._state.counts].classList) {\n              allRef[this._state.counts].focus();\n            } else {\n              allRef[++this._state.counts].focus();\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      event.preventDefault();\n    }\n\n    ngOnDestroy() {\n      // clean up subscriptions and destroy dropdown\n      for (const sub of this._subscriptions) {\n        sub.unsubscribe();\n      }\n\n      this._dropdown.dispose();\n    }\n\n    addBs4Polyfills() {\n      if (!isBs3()) {\n        this.addShowClass();\n        this.checkRightAlignment();\n        this.addDropupStyles();\n      }\n    }\n\n    playAnimation() {\n      if (this._state.isAnimated && this._inlinedMenu) {\n        setTimeout(() => {\n          if (this._inlinedMenu) {\n            this._factoryDropDownAnimation.create(this._inlinedMenu.rootNodes[0]).play();\n          }\n        });\n      }\n    }\n\n    addShowClass() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');\n      }\n    }\n\n    removeShowClass() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');\n      }\n    }\n\n    checkRightAlignment() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        const isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right') || this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-end');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');\n      }\n    }\n\n    addDropupStyles() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        // a little hack to not break support of bootstrap 4 beta\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'bottom', 'auto');\n      }\n    }\n\n    removeDropupStyles() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');\n\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');\n\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'bottom');\n      }\n    }\n\n  }\n\n  BsDropdownDirective.ɵfac = function BsDropdownDirective_Factory(t) {\n    return new (t || BsDropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ComponentLoaderFactory), i0.ɵɵdirectiveInject(i2.BsDropdownState), i0.ɵɵdirectiveInject(i3.BsDropdownConfig), i0.ɵɵdirectiveInject(i4.AnimationBuilder));\n  };\n\n  BsDropdownDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BsDropdownDirective,\n    selectors: [[\"\", \"bsDropdown\", \"\"], [\"\", \"dropdown\", \"\"]],\n    hostVars: 6,\n    hostBindings: function BsDropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.arrowDown\", function BsDropdownDirective_keydown_arrowDown_HostBindingHandler($event) {\n          return ctx.navigationClick($event);\n        })(\"keydown.arrowUp\", function BsDropdownDirective_keydown_arrowUp_HostBindingHandler($event) {\n          return ctx.navigationClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"dropup\", ctx.dropup)(\"open\", ctx.isOpen)(\"show\", ctx.isOpen && ctx.isBs4);\n      }\n    },\n    inputs: {\n      placement: \"placement\",\n      triggers: \"triggers\",\n      container: \"container\",\n      dropup: \"dropup\",\n      autoClose: \"autoClose\",\n      isAnimated: \"isAnimated\",\n      insideClick: \"insideClick\",\n      isDisabled: \"isDisabled\",\n      isOpen: \"isOpen\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\",\n      onShown: \"onShown\",\n      onHidden: \"onHidden\"\n    },\n    exportAs: [\"bs-dropdown\"],\n    features: [i0.ɵɵProvidersFeature([BsDropdownState])]\n  });\n  return BsDropdownDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}