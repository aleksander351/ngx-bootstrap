{"ast":null,"code":"import { ChangeDetectorRef, ElementRef, forwardRef, Provider, Renderer2 } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { parseDate, formatDate, getLocale, isAfter, isBefore, isArray, isDateValid, utcAsLocal } from 'ngx-bootstrap/chronos';\nimport { BsDaterangepickerDirective } from './bs-daterangepicker.component';\nimport { BsLocaleService } from './bs-locale.service';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./bs-daterangepicker.component\";\nimport * as i2 from \"./bs-locale.service\";\nconst BS_DATERANGEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => BsDaterangepickerInputDirective),\n  multi: true\n};\nconst BS_DATERANGEPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => BsDaterangepickerInputDirective),\n  multi: true\n};\nexport let BsDaterangepickerInputDirective = /*#__PURE__*/(() => {\n  class BsDaterangepickerInputDirective {\n    constructor(_picker, _localeService, _renderer, _elRef, changeDetection) {\n      this._picker = _picker;\n      this._localeService = _localeService;\n      this._renderer = _renderer;\n      this._elRef = _elRef;\n      this.changeDetection = changeDetection;\n      this._onChange = Function.prototype;\n      this._onTouched = Function.prototype;\n      this._validatorChange = Function.prototype;\n      this._subs = new Subscription();\n    }\n\n    ngOnInit() {\n      const setBsValue = value => {\n        this._setInputValue(value);\n\n        if (this._value !== value) {\n          this._value = value;\n\n          this._onChange(value);\n\n          this._onTouched();\n        }\n\n        this.changeDetection.markForCheck();\n      }; // if value set via [bsValue] it will not get into value change\n\n\n      if (this._picker._bsValue) {\n        setBsValue(this._picker._bsValue);\n      } // update input value on datepicker value update\n\n\n      this._subs.add(this._picker.bsValueChange.subscribe(value => {\n        this._setInputValue(value);\n\n        if (this._value !== value) {\n          this._value = value;\n\n          this._onChange(value);\n\n          this._onTouched();\n        }\n\n        this.changeDetection.markForCheck();\n      })); // update input value on locale change\n\n\n      this._subs.add(this._localeService.localeChange.subscribe(() => {\n        this._setInputValue(this._value);\n      }));\n\n      this._subs.add( // update input value on format change\n      this._picker.rangeInputFormat$.pipe(distinctUntilChanged()).subscribe(() => {\n        this._setInputValue(this._value);\n      }));\n    }\n\n    ngOnDestroy() {\n      this._subs.unsubscribe();\n    }\n\n    onKeydownEvent(event) {\n      if (event.keyCode === 13 || event.code === 'Enter') {\n        this.hide();\n      }\n    }\n\n    _setInputValue(date) {\n      let range = '';\n\n      if (date) {\n        const start = !date[0] ? '' : formatDate(date[0], this._picker._config.rangeInputFormat, this._localeService.currentLocale);\n        const end = !date[1] ? '' : formatDate(date[1], this._picker._config.rangeInputFormat, this._localeService.currentLocale);\n        range = start && end ? start + this._picker._config.rangeSeparator + end : '';\n      }\n\n      this._renderer.setProperty(this._elRef.nativeElement, 'value', range);\n    }\n\n    onChange(event) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.writeValue(event.target.value);\n\n      this._onChange(this._value);\n\n      if (this._picker._config.returnFocusToInput) {\n        this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n      }\n\n      this._onTouched();\n    }\n\n    validate(c) {\n      let _value = c.value;\n      const errors = [];\n\n      if (_value === null || _value === undefined || !isArray(_value)) {\n        return null;\n      }\n\n      _value = _value.slice().sort((a, b) => a.getTime() - b.getTime());\n\n      const _isFirstDateValid = isDateValid(_value[0]);\n\n      const _isSecondDateValid = isDateValid(_value[1]);\n\n      if (!_isFirstDateValid) {\n        return {\n          bsDate: {\n            invalid: _value[0]\n          }\n        };\n      }\n\n      if (!_isSecondDateValid) {\n        return {\n          bsDate: {\n            invalid: _value[1]\n          }\n        };\n      }\n\n      if (this._picker && this._picker.minDate && isBefore(_value[0], this._picker.minDate, 'date')) {\n        _value[0] = this._picker.minDate;\n        errors.push({\n          bsDate: {\n            minDate: this._picker.minDate\n          }\n        });\n      }\n\n      if (this._picker && this._picker.maxDate && isAfter(_value[1], this._picker.maxDate, 'date')) {\n        _value[1] = this._picker.maxDate;\n        errors.push({\n          bsDate: {\n            maxDate: this._picker.maxDate\n          }\n        });\n      }\n\n      if (errors.length > 0) {\n        this.writeValue(_value);\n        return errors;\n      }\n\n      return null;\n    }\n\n    registerOnValidatorChange(fn) {\n      this._validatorChange = fn;\n    }\n\n    writeValue(value) {\n      if (!value) {\n        this._value = void 0;\n      } else {\n        const _localeKey = this._localeService.currentLocale;\n\n        const _locale = getLocale(_localeKey);\n\n        if (!_locale) {\n          throw new Error(`Locale \"${_localeKey}\" is not defined, please add it with \"defineLocale(...)\"`);\n        }\n\n        let _input = [];\n\n        if (typeof value === 'string') {\n          const trimmedSeparator = this._picker._config.rangeSeparator.trim();\n\n          if (value.replace(/[^-]/g, '').length > 1) {\n            _input = value.split(this._picker._config.rangeSeparator);\n          } else {\n            _input = value.split(trimmedSeparator.length > 0 ? trimmedSeparator : this._picker._config.rangeSeparator).map(_val => _val.trim());\n          }\n        }\n\n        if (Array.isArray(value)) {\n          _input = value;\n        }\n\n        this._value = _input.map(_val => {\n          if (this._picker._config.useUtc) {\n            return utcAsLocal(parseDate(_val, this._picker._config.rangeInputFormat, this._localeService.currentLocale));\n          }\n\n          return parseDate(_val, this._picker._config.rangeInputFormat, this._localeService.currentLocale);\n        }).map(date => isNaN(date.valueOf()) ? void 0 : date);\n      }\n\n      this._picker.bsValue = this._value;\n    }\n\n    setDisabledState(isDisabled) {\n      this._picker.isDisabled = isDisabled;\n\n      if (isDisabled) {\n        this._renderer.setAttribute(this._elRef.nativeElement, 'disabled', 'disabled');\n\n        return;\n      }\n\n      this._renderer.removeAttribute(this._elRef.nativeElement, 'disabled');\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n\n    onBlur() {\n      this._onTouched();\n    }\n\n    hide() {\n      this._picker.hide();\n\n      this._renderer.selectRootElement(this._elRef.nativeElement).blur();\n\n      if (this._picker._config.returnFocusToInput) {\n        this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n      }\n    }\n\n  }\n\n  BsDaterangepickerInputDirective.ɵfac = function BsDaterangepickerInputDirective_Factory(t) {\n    return new (t || BsDaterangepickerInputDirective)(i0.ɵɵdirectiveInject(i1.BsDaterangepickerDirective, 1), i0.ɵɵdirectiveInject(i2.BsLocaleService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  BsDaterangepickerInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BsDaterangepickerInputDirective,\n    selectors: [[\"input\", \"bsDaterangepicker\", \"\"]],\n    hostBindings: function BsDaterangepickerInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function BsDaterangepickerInputDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event);\n        })(\"keyup.esc\", function BsDaterangepickerInputDirective_keyup_esc_HostBindingHandler() {\n          return ctx.hide();\n        })(\"keydown\", function BsDaterangepickerInputDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeydownEvent($event);\n        })(\"blur\", function BsDaterangepickerInputDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        });\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([BS_DATERANGEPICKER_VALUE_ACCESSOR, BS_DATERANGEPICKER_VALIDATOR])]\n  });\n  return BsDaterangepickerInputDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}