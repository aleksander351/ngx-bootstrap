{"ast":null,"code":"import { ProgressbarConfig } from './progressbar.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./progressbar.config\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./bar.component\";\n\nfunction ProgressbarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", ctx_r2.type)(\"value\", ctx_r2._value)(\"max\", ctx_r2.max)(\"animate\", ctx_r2.animate)(\"striped\", ctx_r2.striped);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"type\", item_r6.type)(\"value\", item_r6.value)(\"max\", item_r6.max || ctx_r5.max)(\"animate\", ctx_r5.animate)(\"striped\", ctx_r5.striped);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r6.label);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ProgressbarComponent_ng_template_3_bar_0_Template, 2, 6, \"bar\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4._values);\n  }\n}\n\nconst _c0 = [\"*\"];\nexport let ProgressbarComponent = /*#__PURE__*/(() => {\n  class ProgressbarComponent {\n    constructor(config) {\n      /** maximum total value of progress element */\n      this.max = 100;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      this.isStacked = false;\n      this._value = 0;\n      Object.assign(this, config);\n    }\n    /** current value of progress bar. Could be a number or array of objects\r\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n     */\n\n\n    set value(value) {\n      this.isStacked = Array.isArray(value);\n\n      if (typeof value === 'number') {\n        this._value = value;\n        this._values = void 0;\n      } else {\n        this._value = void 0;\n        this._values = value;\n      }\n    }\n\n  }\n\n  ProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) {\n    return new (t || ProgressbarComponent)(i0.ɵɵdirectiveInject(i1.ProgressbarConfig));\n  };\n\n  ProgressbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProgressbarComponent,\n    selectors: [[\"progressbar\"]],\n    hostVars: 3,\n    hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"max\", ctx.max);\n        i0.ɵɵclassProp(\"progress\", true);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      animate: \"animate\",\n      striped: \"striped\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 3,\n    consts: [[4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"NotStacked\", \"\"], [\"Stacked\", \"\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function ProgressbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, ProgressbarComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 2, 5, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, ProgressbarComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n\n        const _r3 = i0.ɵɵreference(4);\n\n        i0.ɵɵproperty(\"ngIf\", !ctx.isStacked)(\"ngIfThen\", _r1)(\"ngIfElse\", _r3);\n      }\n    },\n    directives: [i2.NgIf, i3.BarComponent, i2.NgForOf],\n    styles: [\"[_nghost-%COMP%]{width:100%;display:flex}\"],\n    changeDetection: 0\n  });\n  return ProgressbarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}