{"ast":null,"code":"import { ComponentRef, ElementRef, EventEmitter, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { BsDatepickerInlineConfig } from './bs-datepicker-inline.config';\nimport { BsDatepickerConfig } from './bs-datepicker.config';\nimport { BsDatepickerInlineContainerComponent } from './themes/bs/bs-datepicker-inline-container.component';\nimport { copyTime } from './utils/copy-time-utils';\nimport { checkBsValue, setCurrentTimeOnDateSelect } from './utils/bs-calendar-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./bs-datepicker-inline.config\";\nimport * as i2 from \"ngx-bootstrap/component-loader\";\nexport let BsDatepickerInlineDirective = /*#__PURE__*/(() => {\n  class BsDatepickerInlineDirective {\n    constructor(_config, _elementRef, _renderer, _viewContainerRef, cis) {\n      this._config = _config;\n      this._elementRef = _elementRef;\n      /**\r\n       * Indicates whether datepicker is enabled or not\r\n       */\n\n      this.isDisabled = false;\n      /**\r\n       * Emits when datepicker value has been changed\r\n       */\n\n      this.bsValueChange = new EventEmitter();\n      this._subs = []; // todo: assign only subset of fields\n\n      Object.assign(this, this._config);\n      this._datepicker = cis.createLoader(_elementRef, _viewContainerRef, _renderer);\n    }\n    /**\r\n     * Initial value of datepicker\r\n     */\n\n\n    set bsValue(value) {\n      var _a;\n\n      if (this._bsValue === value) {\n        return;\n      }\n\n      if (!this._bsValue && value && !this._config.withTimepicker) {\n        const now = new Date();\n        copyTime(value, now);\n      }\n\n      if (value && ((_a = this.bsConfig) === null || _a === void 0 ? void 0 : _a.initCurrentTime)) {\n        value = setCurrentTimeOnDateSelect(value);\n      }\n\n      this._bsValue = value;\n      this.bsValueChange.emit(value);\n    }\n\n    ngOnInit() {\n      this.setConfig(); // if date changes from external source (model -> view)\n\n      this._subs.push(this.bsValueChange.subscribe(value => {\n        if (this._datepickerRef) {\n          this._datepickerRef.instance.value = value;\n        }\n      })); // if date changes from picker (view -> model)\n\n\n      if (this._datepickerRef) {\n        this._subs.push(this._datepickerRef.instance.valueChange.subscribe(value => {\n          this.bsValue = value;\n        }));\n      }\n    }\n\n    ngOnChanges(changes) {\n      var _a, _b, _c;\n\n      if (changes[\"bsConfig\"]) {\n        if (((_a = changes[\"bsConfig\"].currentValue) === null || _a === void 0 ? void 0 : _a.initCurrentTime) && ((_b = changes[\"bsConfig\"].currentValue) === null || _b === void 0 ? void 0 : _b.initCurrentTime) !== ((_c = changes[\"bsConfig\"].previousValue) === null || _c === void 0 ? void 0 : _c.initCurrentTime) && this._bsValue) {\n          this._bsValue = setCurrentTimeOnDateSelect(this._bsValue);\n          this.bsValueChange.emit(this._bsValue);\n        }\n      }\n\n      if (!this._datepickerRef || !this._datepickerRef.instance) {\n        return;\n      }\n\n      if (changes[\"minDate\"]) {\n        this._datepickerRef.instance.minDate = this.minDate;\n      }\n\n      if (changes[\"maxDate\"]) {\n        this._datepickerRef.instance.maxDate = this.maxDate;\n      }\n\n      if (changes[\"datesDisabled\"]) {\n        this._datepickerRef.instance.datesDisabled = this.datesDisabled;\n      }\n\n      if (changes[\"datesEnabled\"]) {\n        this._datepickerRef.instance.datesEnabled = this.datesEnabled;\n        this._datepickerRef.instance.value = this._bsValue;\n      }\n\n      if (changes[\"isDisabled\"]) {\n        this._datepickerRef.instance.isDisabled = this.isDisabled;\n      }\n\n      if (changes[\"dateCustomClasses\"]) {\n        this._datepickerRef.instance.dateCustomClasses = this.dateCustomClasses;\n      }\n\n      if (changes[\"dateTooltipTexts\"]) {\n        this._datepickerRef.instance.dateTooltipTexts = this.dateTooltipTexts;\n      }\n\n      this.setConfig();\n    }\n    /**\r\n     * Set config for datepicker\r\n     */\n\n\n    setConfig() {\n      var _a;\n\n      if (this._datepicker) {\n        this._datepicker.hide();\n      }\n\n      this._config = Object.assign({}, this._config, this.bsConfig, {\n        value: checkBsValue(this._bsValue, this.maxDate || this.bsConfig && this.bsConfig.maxDate),\n        isDisabled: this.isDisabled,\n        minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n        maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate,\n        dateCustomClasses: this.dateCustomClasses || this.bsConfig && this.bsConfig.dateCustomClasses,\n        dateTooltipTexts: this.dateTooltipTexts || this.bsConfig && this.bsConfig.dateTooltipTexts,\n        datesDisabled: this.datesDisabled || this.bsConfig && this.bsConfig.datesDisabled,\n        datesEnabled: this.datesEnabled || this.bsConfig && this.bsConfig.datesEnabled,\n        initCurrentTime: (_a = this.bsConfig) === null || _a === void 0 ? void 0 : _a.initCurrentTime\n      });\n      this._datepickerRef = this._datepicker.provide({\n        provide: BsDatepickerConfig,\n        useValue: this._config\n      }).attach(BsDatepickerInlineContainerComponent).to(this._elementRef).show();\n    }\n\n    ngOnDestroy() {\n      this._datepicker.dispose();\n    }\n\n  }\n\n  BsDatepickerInlineDirective.ɵfac = function BsDatepickerInlineDirective_Factory(t) {\n    return new (t || BsDatepickerInlineDirective)(i0.ɵɵdirectiveInject(i1.BsDatepickerInlineConfig), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ComponentLoaderFactory));\n  };\n\n  BsDatepickerInlineDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BsDatepickerInlineDirective,\n    selectors: [[\"bs-datepicker-inline\"]],\n    inputs: {\n      bsConfig: \"bsConfig\",\n      isDisabled: \"isDisabled\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      dateCustomClasses: \"dateCustomClasses\",\n      dateTooltipTexts: \"dateTooltipTexts\",\n      datesEnabled: \"datesEnabled\",\n      datesDisabled: \"datesDisabled\",\n      bsValue: \"bsValue\"\n    },\n    outputs: {\n      bsValueChange: \"bsValueChange\"\n    },\n    exportAs: [\"bsDatepickerInline\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BsDatepickerInlineDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}