{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../../../src/progressbar/progressbar.component\";\nexport let DemoProgressbarStackedComponent = /*#__PURE__*/(() => {\n  class DemoProgressbarStackedComponent {\n    constructor() {\n      this.stacked = [];\n      this.randomStacked();\n    }\n\n    randomStacked() {\n      const types = ['success', 'info', 'warning', 'danger'];\n      this.stacked = [];\n      const n = Math.floor(Math.random() * 4 + 1);\n\n      for (let i = 0; i < n; i++) {\n        const index = Math.floor(Math.random() * 4);\n        const value = Math.floor(Math.random() * 27 + 3);\n        this.stacked.push({\n          value,\n          type: types[index],\n          label: value + ' %'\n        });\n      }\n    }\n\n  }\n\n  DemoProgressbarStackedComponent.ɵfac = function DemoProgressbarStackedComponent_Factory(t) {\n    return new (t || DemoProgressbarStackedComponent)();\n  };\n\n  DemoProgressbarStackedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DemoProgressbarStackedComponent,\n    selectors: [[\"demo-progressbar-stacked\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"row\"], [1, \"col-lg-12\"], [1, \"mb-3\"], [1, \"progress\", 3, \"value\", \"max\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-primary\", 3, \"click\"]],\n    template: function DemoProgressbarStackedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"progressbar\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function DemoProgressbarStackedComponent_Template_button_click_5_listener() {\n          return ctx.randomStacked();\n        });\n        i0.ɵɵtext(6, \"Randomize\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx.stacked)(\"max\", 100);\n      }\n    },\n    directives: [i1.ProgressbarComponent],\n    encapsulation: 2\n  });\n  return DemoProgressbarStackedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}