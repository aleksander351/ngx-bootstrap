{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\r\n * Class for managing stylesheets. Stylesheets are loaded into named slots so\r\n * that they can be removed or changed later.\r\n */\n\nexport let StyleManager = /*#__PURE__*/(() => {\n  class StyleManager {\n    /**\r\n     * Set the stylesheet with the specified key.\r\n     */\n    setStyle(key, href) {\n      const linkElement = getLinkElementForKey(key);\n\n      if (!linkElement) {\n        return;\n      }\n\n      linkElement.setAttribute('href', href);\n    }\n    /**\r\n     * Remove the stylesheet with the specified key.\r\n     */\n\n\n    removeStyle(key) {\n      const existingLinkElement = getExistingLinkElementByKey(key);\n\n      if (!existingLinkElement || !document.head) {\n        return;\n      }\n\n      document.head.removeChild(existingLinkElement);\n    }\n\n  }\n\n  StyleManager.ɵfac = function StyleManager_Factory(t) {\n    return new (t || StyleManager)();\n  };\n\n  StyleManager.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StyleManager,\n    factory: StyleManager.ɵfac,\n    providedIn: 'platform'\n  });\n  return StyleManager;\n})();\n\nfunction getLinkElementForKey(key) {\n  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);\n}\n\nfunction getExistingLinkElementByKey(key) {\n  if (!document.head) {\n    return null;\n  }\n\n  return document.head.querySelector(`link[rel=\"stylesheet\"].${getClassNameForKey(key)}`);\n}\n\nfunction createLinkElementWithKey(key) {\n  const linkEl = document.createElement('link');\n  linkEl.setAttribute('rel', 'stylesheet');\n  linkEl.classList.add(getClassNameForKey(key));\n\n  if (!document.head) {\n    return;\n  }\n\n  document.head.appendChild(linkEl);\n  return linkEl;\n}\n\nfunction getClassNameForKey(key) {\n  return `style-manager-${key}`;\n}","map":null,"metadata":{},"sourceType":"module"}