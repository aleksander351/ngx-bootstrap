{"ast":null,"code":"import { ElementRef, Renderer2, SimpleChanges } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"*\"];\nexport let BarComponent = /*#__PURE__*/(() => {\n  class BarComponent {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      /** maximum total value of progress element */\n\n      this.max = 100;\n      /** current value of progress bar */\n\n      this.value = 0;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n\n      this.type = 'info';\n      this.percent = 100;\n    }\n\n    get isBs3() {\n      return isBs3();\n    }\n\n    ngOnChanges(changes) {\n      var _a;\n\n      if (changes[\"value\"] || changes[\"max\"]) {\n        this.percent = 100 * (Number(changes[\"value\"].currentValue || 0) / Number(((_a = changes[\"max\"]) === null || _a === void 0 ? void 0 : _a.currentValue) || this.max || 100));\n      }\n\n      if (changes[\"type\"]) {\n        this.applyTypeClasses();\n      }\n    }\n\n    applyTypeClasses() {\n      if (this._prevType) {\n        const barTypeClass = `progress-bar-${this._prevType}`;\n        const bgClass = `bg-${this._prevType}`;\n        this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n        this.renderer.removeClass(this.el.nativeElement, bgClass);\n        this._prevType = void 0;\n      }\n\n      if (this.type) {\n        const barTypeClass = `progress-bar-${this.type}`;\n        const bgClass = `bg-${this.type}`;\n        this.renderer.addClass(this.el.nativeElement, barTypeClass);\n        this.renderer.addClass(this.el.nativeElement, bgClass);\n        this._prevType = this.type;\n      }\n    }\n\n  }\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  BarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"bar\"]],\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n    hostVars: 15,\n    hostBindings: function BarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n        i0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.percent, \"%\");\n        i0.ɵɵclassProp(\"progress-bar\", true)(\"progress-bar-animated\", !ctx.isBs3 && ctx.animate)(\"progress-bar-striped\", ctx.striped)(\"active\", ctx.isBs3 && ctx.animate);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      value: \"value\",\n      animate: \"animate\",\n      striped: \"striped\",\n      type: \"type\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}