{"ast":null,"code":"import { ApiSectionsComponent } from '@ngx-bootstrap-doc/docs';\nimport { DemoTypeaheadAdaptivePositionComponent } from './demos/adaptive-position/adaptive-position';\nimport { DemoTypeaheadAnimatedComponent } from './demos/animated/animated';\nimport { DemoTypeaheadBasicComponent } from './demos/basic/basic';\nimport { DemoTypeaheadCancelRequestOnFocusLostComponent } from './demos/cancel-on-focus-lost/cancel-on-focus-lost';\nimport { DemoTypeaheadConfigComponent } from './demos/config/config';\nimport { DemoTypeaheadContainerComponent } from './demos/container/container';\nimport { DemoTypeaheadDelayComponent } from './demos/delay/delay';\nimport { DemoTypeaheadDropupComponent } from './demos/dropup/dropup';\nimport { DemoTypeaheadFieldComponent } from './demos/field/field';\nimport { DemoTypeaheadAsyncComponent } from './demos/async/async';\nimport { DemoTypeaheadReactiveFormComponent } from './demos/reactive-form/reactive-form';\nimport { DemoTypeaheadFormComponent } from './demos/form/form';\nimport { DemoTypeaheadGroupingComponent } from './demos/grouping/grouping';\nimport { DemoTypeaheadItemTemplateComponent } from './demos/item-template/item-template';\nimport { DemoTypeaheadListTemplateComponent } from './demos/list-template/list-template';\nimport { DemoTypeaheadLatinizeComponent } from './demos/latinize/latinize';\nimport { DemoTypeaheadMinLengthComponent } from './demos/min-length/min-length';\nimport { DemoTypeaheadNoResultComponent } from './demos/no-result/no-result';\nimport { DemoTypeaheadOnBlurComponent } from './demos/on-blur/on-blur';\nimport { DemoTypeaheadOnSelectComponent } from './demos/on-select/on-select';\nimport { DemoTypeaheadPhraseDelimitersComponent } from './demos/phrase-delimiters/phrase-delimiters';\nimport { DemoTypeaheadScrollableComponent } from './demos/scrollable/scrollable';\nimport { DemotypeaheadSelectFirstItemComponent } from './demos/selected-first-item/selected-first-item';\nimport { DemoTypeaheadShowOnBlurComponent } from './demos/show-on-blur/show-on-blur';\nimport { DemoTypeaheadSingleWorldComponent } from './demos/single-world/single-world';\nimport { ExamplesComponent } from '@ngx-bootstrap-doc/docs';\nimport { NgApiDocComponent, NgApiDocConfigComponent } from '@ngx-bootstrap-doc/docs';\nimport { DemoTypeaheadFirstItemActiveComponent } from './demos/first-item-active/first-item-active';\nimport { DemoTypeaheadAsyncHttpRequestComponent } from './demos/async-http-request/async-http-request';\nimport { DemoTypeaheadOrderingComponent } from './demos/ordering/ordering';\nimport { DemoTypeaheadMultipleSearchComponent } from './demos/multiple-search/multiple-search';\nexport const demoComponentContent = [{\n  name: 'Overview',\n  anchor: 'overview',\n  tabName: 'overview',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Basic array',\n    anchor: 'Basic-array',\n    component: require('!!raw-loader!./demos/basic/basic.ts'),\n    html: require('!!raw-loader!./demos/basic/basic.html'),\n    outlet: DemoTypeaheadBasicComponent\n  }, {\n    title: 'With animation',\n    anchor: 'animated',\n    component: require('!!raw-loader!./demos/animated/animated'),\n    html: require('!!raw-loader!./demos/animated/animated.html'),\n    description: `You can enable animation via <code>isAnimated</code> input or config option`,\n    outlet: DemoTypeaheadAnimatedComponent\n  }, {\n    title: 'Adaptive position',\n    anchor: 'adaptive-position',\n    description: `\n          <p>You can enable adaptive position via <code>adaptivePosition</code> input or config option</p>\n        `,\n    component: require('!!raw-loader!./demos/adaptive-position/adaptive-position.ts'),\n    html: require('!!raw-loader!./demos/adaptive-position/adaptive-position.html'),\n    outlet: DemoTypeaheadAdaptivePositionComponent\n  }, {\n    title: 'Item template',\n    anchor: 'item-template',\n    component: require('!!raw-loader!./demos/item-template/item-template.ts'),\n    html: require('!!raw-loader!./demos/item-template/item-template.html'),\n    outlet: DemoTypeaheadItemTemplateComponent\n  }, {\n    title: 'List template',\n    anchor: 'list-template',\n    component: require('!!raw-loader!./demos/list-template/list-template.ts'),\n    html: require('!!raw-loader!./demos/list-template/list-template.html'),\n    outlet: DemoTypeaheadListTemplateComponent\n  }, {\n    title: 'Option field',\n    anchor: 'option-field',\n    component: require('!!raw-loader!./demos/field/field.ts'),\n    html: require('!!raw-loader!./demos/field/field.html'),\n    outlet: DemoTypeaheadFieldComponent\n  }, {\n    title: 'Async data',\n    anchor: 'async-data',\n    component: require('!!raw-loader!./demos/async/async.ts'),\n    html: require('!!raw-loader!./demos/async/async.html'),\n    outlet: DemoTypeaheadAsyncComponent\n  }, {\n    title: 'Async using http request',\n    anchor: 'async-http-request',\n    description: `\n          <p>Use http request to search for data. If you need to handle http error, do this inside <code>tap</code> operator.\n          Enter search value several times (10-15), and after a few success responses API should return an error\n          (GitHub limit for requests)</p>\n        `,\n    component: require('!!raw-loader!./demos/async-http-request/async-http-request.ts'),\n    html: require('!!raw-loader!./demos/async-http-request/async-http-request.html'),\n    outlet: DemoTypeaheadAsyncHttpRequestComponent\n  }, {\n    title: 'Cancel on focus lost',\n    anchor: 'cancel-on-focus-lost',\n    description: `<p>Set config property <code>cancelRequestOnFocusLost</code> to <code>true</code> if you want to cancel async request on focus lost event</p>`,\n    component: require('!!raw-loader!./demos/cancel-on-focus-lost/cancel-on-focus-lost.ts'),\n    html: require('!!raw-loader!./demos/cancel-on-focus-lost/cancel-on-focus-lost.html'),\n    outlet: DemoTypeaheadCancelRequestOnFocusLostComponent\n  }, {\n    title: 'With delay',\n    anchor: 'delay',\n    description: `\n          <p>Use <code>typeaheadWaitMs</code> to set minimal waiting time after last character typed\n          before typeahead kicks-in. In example a search begins with delay in 1 second</p>\n        `,\n    component: require('!!raw-loader!./demos/delay/delay.ts'),\n    html: require('!!raw-loader!./demos/delay/delay.html'),\n    outlet: DemoTypeaheadDelayComponent\n  }, {\n    title: 'Template-driven forms',\n    anchor: 'forms',\n    description: `\n          <p>Typeahead can be used in template-driven forms. Keep in mind that value of <code>ngModel</code> is\n          <code>string</code></p>\n        `,\n    component: require('!!raw-loader!./demos/form/form.ts'),\n    html: require('!!raw-loader!./demos/form/form.html'),\n    outlet: DemoTypeaheadFormComponent\n  }, {\n    title: 'Reactive forms',\n    anchor: 'reactive-forms',\n    description: `\n          <p>Typeahead can be used in reactive forms</p>\n        `,\n    component: require('!!raw-loader!./demos/reactive-form/reactive-form.ts'),\n    html: require('!!raw-loader!./demos/reactive-form/reactive-form.html'),\n    outlet: DemoTypeaheadReactiveFormComponent\n  }, {\n    title: 'Grouping results',\n    anchor: 'grouping-results',\n    component: require('!!raw-loader!./demos/grouping/grouping.ts'),\n    html: require('!!raw-loader!./demos/grouping/grouping.html'),\n    outlet: DemoTypeaheadGroupingComponent\n  }, {\n    title: 'Ignore spaces and order',\n    anchor: 'single-world',\n    component: require('!!raw-loader!./demos/single-world/single-world.ts'),\n    html: require('!!raw-loader!./demos/single-world/single-world.html'),\n    description: `\n          <p>After setting <code>typeaheadSingleWords</code> input property to <code>true</code>\n          order of typed symbols and spaces between them will be ignored. For example, \"<i>zona ari</i>\"\n          will match with \"<i>Arizona</i>\"</p>\n        `,\n    outlet: DemoTypeaheadSingleWorldComponent\n  }, {\n    title: 'Phrase delimiters',\n    anchor: 'phrase-delimiters',\n    component: require('!!raw-loader!./demos/phrase-delimiters/phrase-delimiters.ts'),\n    html: require('!!raw-loader!./demos/phrase-delimiters/phrase-delimiters.html'),\n    description: `\n          <p>Set the word delimiter by <code>typeaheadPhraseDelimiters</code> to match exact phrase.\n          This is demo with delimeters \"<code>&</code>\" and \"<code>,</code>\"</p>\n        `,\n    outlet: DemoTypeaheadPhraseDelimitersComponent\n  }, {\n    title: 'Dropup',\n    anchor: 'dropup',\n    component: require('!!raw-loader!./demos/dropup/dropup.ts'),\n    html: require('!!raw-loader!./demos/dropup/dropup.html'),\n    outlet: DemoTypeaheadDropupComponent\n  }, {\n    title: 'On blur',\n    anchor: 'on-blur',\n    description: `\n         <p>Returns an option on which user lost a focus. To reproduce start typing the name of the state, then focus\n         on one of the options with mouse or arrow keys and click outside of the typeahead</p>\n        `,\n    component: require('!!raw-loader!./demos/on-blur/on-blur.ts'),\n    html: require('!!raw-loader!./demos/on-blur/on-blur.html'),\n    outlet: DemoTypeaheadOnBlurComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container',\n    description: `\n        <p><code>container</code> is an input property specifying the element the typeahead should be appended to.</p>\n        `,\n    component: require('!!raw-loader!./demos/container/container.ts'),\n    html: require('!!raw-loader!./demos/container/container.html'),\n    outlet: DemoTypeaheadContainerComponent\n  }, {\n    title: 'No result',\n    anchor: 'no-result',\n    description: `\n         <p>Used to display the state when no matches were found. To see message\n         \"No Results Found\" enter the value that doesn't match anything from the list</p>\n        `,\n    component: require('!!raw-loader!./demos/no-result/no-result.ts'),\n    html: require('!!raw-loader!./demos/no-result/no-result.html'),\n    outlet: DemoTypeaheadNoResultComponent\n  }, {\n    title: 'Scrollable',\n    anchor: 'scrollable',\n    component: require('!!raw-loader!./demos/scrollable/scrollable.ts'),\n    html: require('!!raw-loader!./demos/scrollable/scrollable.html'),\n    outlet: DemoTypeaheadScrollableComponent\n  }, {\n    title: 'Latinize',\n    anchor: 'latinize',\n    description: `\n          <p>Use <code>typeaheadLatinize</code> property for matching latin symbols. If it is set\n          to <code>true</code> the word <strong>súper</strong> would match <strong>super</strong> and vice versa.</p>\n        `,\n    component: require('!!raw-loader!./demos/latinize/latinize.ts'),\n    html: require('!!raw-loader!./demos/latinize/latinize.html'),\n    outlet: DemoTypeaheadLatinizeComponent\n  }, {\n    title: 'On select / On preview',\n    anchor: 'on-select',\n    description: `\n          <p><code>typeaheadOnSelect</code> event is fired when an option was selected.\n          Returns an object with this option.</p>\n          <p><code>typeaheadOnPreview</code> event is fired when an option was highlighted.\n          Returns an object with this option.</p>\n        `,\n    component: require('!!raw-loader!./demos/on-select/on-select.ts'),\n    html: require('!!raw-loader!./demos/on-select/on-select.html'),\n    outlet: DemoTypeaheadOnSelectComponent\n  }, {\n    title: 'Min length',\n    anchor: 'min-length',\n    description: `\n          <p>Minimal number of characters that needs to be entered before typeahead kicks in. When set to 0, typeahead shows on focus with full list of options.</p>\n        `,\n    component: require('!!raw-loader!./demos/min-length/min-length.ts'),\n    html: require('!!raw-loader!./demos/min-length/min-length.html'),\n    outlet: DemoTypeaheadMinLengthComponent\n  }, {\n    title: 'Show results on blur',\n    anchor: 'show-on-blur',\n    description: `\n          <p>Use input property <code>typeaheadHideResultsOnBlur</code> or config property <code>hideResultsOnBlur</code>\n          to prevent hiding typeahead's results until a user doesn't choose an item</p>\n        `,\n    component: require('!!raw-loader!./demos/show-on-blur/show-on-blur.ts'),\n    html: require('!!raw-loader!./demos/show-on-blur/show-on-blur.html'),\n    outlet: DemoTypeaheadShowOnBlurComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'configuration',\n    component: require('!!raw-loader!./demos/config/config'),\n    html: require('!!raw-loader!./demos/config/config.html'),\n    outlet: DemoTypeaheadConfigComponent\n  }, {\n    title: 'Is first item active',\n    anchor: 'first-item-active',\n    description: `\n          <p>Use input property <code>typeaheadIsFirstItemActive</code> or config property <code>isFirstItemActive</code> to make the first item active/inactive </p>\n        `,\n    component: require('!!raw-loader!./demos/first-item-active/first-item-active.ts'),\n    html: require('!!raw-loader!./demos/first-item-active/first-item-active.html'),\n    outlet: DemoTypeaheadFirstItemActiveComponent\n  }, {\n    title: 'Selected first item',\n    anchor: 'selected-first-item',\n    description: `\n          <p>Use <code>typeaheadSelectFirstItem</code> property to make the first item in options list unselectable by tab and enter.</p>\n        `,\n    component: require('!!raw-loader!./demos/selected-first-item/selected-first-item.ts'),\n    html: require('!!raw-loader!./demos/selected-first-item/selected-first-item.html'),\n    outlet: DemotypeaheadSelectFirstItemComponent\n  }, {\n    title: 'Order results',\n    anchor: 'typeahead-ordering',\n    description: `\n          <p>Use <code>typeaheadOrderBy</code> property to order your result by a certain field and in certain direction</p>\n        `,\n    component: require('!!raw-loader!./demos/ordering/ordering.ts'),\n    html: require('!!raw-loader!./demos/ordering/ordering.html'),\n    outlet: DemoTypeaheadOrderingComponent\n  }, {\n    title: 'Multiple search',\n    anchor: 'multiple-search',\n    component: require('!!raw-loader!./demos/multiple-search/multiple-search.ts'),\n    html: require('!!raw-loader!./demos/multiple-search/multiple-search.html'),\n    description: `\n          <p>Set <code>typeaheadMultipleSearch</code> input property to <code>true</code>\n          and provide the multiple search delimiter by <code>typeaheadMultipleSearchDelimiters</code>\n          to be able to search typeahead again after using one of the provided delimiters. Default delimiter\n          is \"<code>,</code>\" if <code>typeaheadMultipleSearchDelimiters</code> is not used.\n          After picking a first value from typeahead\n          dropdown, type \"<code>,</code>\" or \"<code>|</code>\" and then next value can be searched.\n          This is demo with delimeters \"<code>,</code>\" and \"<code>|</code>\"</p>\n        `,\n    outlet: DemoTypeaheadMultipleSearchComponent\n  }]\n}, {\n  name: 'Installation',\n  anchor: 'api-reference',\n  tabName: 'api',\n  outlet: ApiSectionsComponent,\n  usage: require('!!raw-loader!./docs/usage.md'),\n  importInfo: '<span class=\"pln\">ng add ngx</span><span class=\"pun\">-</span><span class=\"pln\">bootstrap </span> --component <span class=\"pln\">typeahead</span>',\n  content: [{\n    title: 'TypeaheadDirective',\n    anchor: 'TypeaheadDirective',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'TypeaheadConfig',\n    anchor: 'bs-typeahead-config',\n    outlet: NgApiDocConfigComponent\n  }, {\n    title: 'TypeaheadOptionListContext',\n    anchor: 'typeahead-option-list-context',\n    outlet: NgApiDocConfigComponent\n  }, {\n    title: 'TypeaheadOptionItemContext',\n    anchor: 'typeahead-option-item-context',\n    outlet: NgApiDocConfigComponent\n  }, {\n    title: 'TypeaheadTemplateMethods',\n    anchor: 'typeahead-template method',\n    outlet: NgApiDocConfigComponent,\n    showMethods: true\n  }]\n}, {\n  name: 'Examples',\n  anchor: 'examples',\n  tabName: 'examples',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Basic array',\n    anchor: 'Basic-array-ex',\n    outlet: DemoTypeaheadBasicComponent\n  }, {\n    title: 'With animation',\n    anchor: 'animated-ex',\n    outlet: DemoTypeaheadAnimatedComponent\n  }, {\n    title: 'Adaptive position',\n    anchor: 'adaptive-position-ex',\n    outlet: DemoTypeaheadAdaptivePositionComponent\n  }, {\n    title: 'Item template',\n    anchor: 'item-template-ex',\n    outlet: DemoTypeaheadItemTemplateComponent\n  }, {\n    title: 'List template',\n    anchor: 'list-template-ex',\n    outlet: DemoTypeaheadListTemplateComponent\n  }, {\n    title: 'Option field',\n    anchor: 'option-field-ex',\n    outlet: DemoTypeaheadFieldComponent\n  }, {\n    title: 'Async data',\n    anchor: 'async-data-ex',\n    outlet: DemoTypeaheadAsyncComponent\n  }, {\n    title: 'Async using http request',\n    anchor: 'async-http-request-ex',\n    outlet: DemoTypeaheadAsyncHttpRequestComponent\n  }, {\n    title: 'Cancel on focus lost',\n    anchor: 'cancel-on-focus-lost-ex',\n    outlet: DemoTypeaheadCancelRequestOnFocusLostComponent\n  }, {\n    title: 'With delay',\n    anchor: 'delay-ex',\n    outlet: DemoTypeaheadDelayComponent\n  }, {\n    title: 'Template-driven forms',\n    anchor: 'forms-ex',\n    outlet: DemoTypeaheadFormComponent\n  }, {\n    title: 'Reactive forms',\n    anchor: 'reactive-forms-ex',\n    outlet: DemoTypeaheadReactiveFormComponent\n  }, {\n    title: 'Grouping results',\n    anchor: 'grouping-results-ex',\n    outlet: DemoTypeaheadGroupingComponent\n  }, {\n    title: 'Ignore spaces and order',\n    anchor: 'single-world-ex',\n    outlet: DemoTypeaheadSingleWorldComponent\n  }, {\n    title: 'Phrase delimiters',\n    anchor: 'phrase-delimiters-ex',\n    outlet: DemoTypeaheadPhraseDelimitersComponent\n  }, {\n    title: 'Dropup',\n    anchor: 'dropup-ex',\n    outlet: DemoTypeaheadDropupComponent\n  }, {\n    title: 'On blur',\n    anchor: 'on-blur-ex',\n    outlet: DemoTypeaheadOnBlurComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container-ex',\n    outlet: DemoTypeaheadContainerComponent\n  }, {\n    title: 'No result',\n    anchor: 'no-result-ex',\n    outlet: DemoTypeaheadNoResultComponent\n  }, {\n    title: 'Scrollable',\n    anchor: 'scrollable-ex',\n    outlet: DemoTypeaheadScrollableComponent\n  }, {\n    title: 'Latinize',\n    anchor: 'latinize-ex',\n    outlet: DemoTypeaheadLatinizeComponent\n  }, {\n    title: 'On select / On preview',\n    anchor: 'on-select-ex',\n    outlet: DemoTypeaheadOnSelectComponent\n  }, {\n    title: 'Min length',\n    anchor: 'min-length-ex',\n    outlet: DemoTypeaheadMinLengthComponent\n  }, {\n    title: 'Show results on blur',\n    anchor: 'show-on-blur-ex',\n    outlet: DemoTypeaheadShowOnBlurComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'configuration-ex',\n    outlet: DemoTypeaheadConfigComponent\n  }, {\n    title: 'Is first item active',\n    anchor: 'first-item-active-ex',\n    outlet: DemoTypeaheadFirstItemActiveComponent\n  }, {\n    title: 'Selected first item',\n    anchor: 'selected-first-item-ex',\n    outlet: DemotypeaheadSelectFirstItemComponent\n  }, {\n    title: 'Order results',\n    anchor: 'typeahead-ordering-ex',\n    outlet: DemoTypeaheadOrderingComponent\n  }, {\n    title: 'Multiple search',\n    anchor: 'multiple-search-ex',\n    outlet: DemoTypeaheadMultipleSearchComponent\n  }]\n}];","map":null,"metadata":{},"sourceType":"module"}