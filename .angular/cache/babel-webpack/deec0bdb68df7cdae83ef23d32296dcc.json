{"ast":null,"code":"import { ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';\nimport { BsDropdownState } from './bs-dropdown.state';\nimport { BsDropdownDirective } from './bs-dropdown.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./bs-dropdown.directive\";\nimport * as i2 from \"./bs-dropdown.state\";\nexport let BsDropdownToggleDirective = /*#__PURE__*/(() => {\n  class BsDropdownToggleDirective {\n    constructor(_changeDetectorRef, _dropdown, _element, _renderer, _state) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dropdown = _dropdown;\n      this._element = _element;\n      this._renderer = _renderer;\n      this._state = _state;\n      this.isOpen = false;\n      this._subscriptions = []; // sync is open value with state\n\n      this._subscriptions.push(this._state.isOpenChange.subscribe(value => {\n        this.isOpen = value;\n\n        if (value) {\n          this._documentClickListener = this._renderer.listen('document', 'click', event => {\n            if (this._state.autoClose && event.button !== 2 && !this._element.nativeElement.contains(event.target) && !(this._state.insideClick && this._dropdown._contains(event))) {\n              this._state.toggleClick.emit(false);\n\n              this._changeDetectorRef.detectChanges();\n            }\n          });\n          this._escKeyUpListener = this._renderer.listen(this._element.nativeElement, 'keyup.esc', () => {\n            if (this._state.autoClose) {\n              this._state.toggleClick.emit(false);\n\n              this._changeDetectorRef.detectChanges();\n            }\n          });\n        } else {\n          this._documentClickListener && this._documentClickListener();\n          this._escKeyUpListener && this._escKeyUpListener();\n        }\n      })); // populate disabled state\n\n\n      this._subscriptions.push(this._state.isDisabledChange.subscribe(value => this.isDisabled = value || void 0));\n    }\n\n    onClick(event) {\n      if (this._state.stopOnClickPropagation) {\n        event.stopPropagation();\n      }\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      this._state.toggleClick.emit(true);\n    }\n\n    ngOnDestroy() {\n      if (this._documentClickListener) {\n        this._documentClickListener();\n      }\n\n      if (this._escKeyUpListener) {\n        this._escKeyUpListener();\n      }\n\n      for (const sub of this._subscriptions) {\n        sub.unsubscribe();\n      }\n    }\n\n  }\n\n  BsDropdownToggleDirective.ɵfac = function BsDropdownToggleDirective_Factory(t) {\n    return new (t || BsDropdownToggleDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.BsDropdownDirective), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.BsDropdownState));\n  };\n\n  BsDropdownToggleDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BsDropdownToggleDirective,\n    selectors: [[\"\", \"bsDropdownToggle\", \"\"], [\"\", \"dropdownToggle\", \"\"]],\n    hostVars: 3,\n    hostBindings: function BsDropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-haspopup\", true)(\"disabled\", ctx.isDisabled)(\"aria-expanded\", ctx.isOpen);\n      }\n    },\n    exportAs: [\"bs-dropdown-toggle\"]\n  });\n  return BsDropdownToggleDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}