{"ast":null,"code":"import { ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';\nimport { BsDropdownState } from './bs-dropdown.state';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { dropdownAnimation } from './dropdown-animations';\nimport { AnimationBuilder } from '@angular/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./bs-dropdown.state\";\nimport * as i2 from \"@angular/animations\";\nimport * as i3 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    dropdown: a0\n  };\n};\n\nconst _c1 = [\"*\"]; // todo: revert ngClass to [class] when false positive angular-cli issue is fixed\n//          [class.dropdown]=\"direction === 'down'\"-->\n\nexport let BsDropdownContainerComponent = /*#__PURE__*/(() => {\n  class BsDropdownContainerComponent {\n    constructor(_state, cd, _renderer, _element, _builder) {\n      this._state = _state;\n      this.cd = cd;\n      this._renderer = _renderer;\n      this._element = _element;\n      this.isOpen = false;\n      this._factoryDropDownAnimation = _builder.build(dropdownAnimation);\n      this._subscription = _state.isOpenChange.subscribe(value => {\n        this.isOpen = value;\n\n        const dropdown = this._element.nativeElement.querySelector('.dropdown-menu');\n\n        this._renderer.addClass(this._element.nativeElement.querySelector('div'), 'open');\n\n        if (dropdown && !isBs3()) {\n          this._renderer.addClass(dropdown, 'show');\n\n          if (dropdown.classList.contains('dropdown-menu-right') || dropdown.classList.contains('dropdown-menu-end')) {\n            this._renderer.setStyle(dropdown, 'left', 'auto');\n\n            this._renderer.setStyle(dropdown, 'right', '0');\n          }\n\n          if (this.direction === 'up') {\n            this._renderer.setStyle(dropdown, 'top', 'auto');\n\n            this._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');\n          }\n        }\n\n        if (dropdown && this._state.isAnimated) {\n          this._factoryDropDownAnimation.create(dropdown).play();\n        }\n\n        this.cd.markForCheck();\n        this.cd.detectChanges();\n      });\n    }\n\n    get direction() {\n      return this._state.direction;\n    }\n    /** @internal */\n\n\n    _contains(el) {\n      return this._element.nativeElement.contains(el);\n    }\n\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n\n  }\n\n  BsDropdownContainerComponent.ɵfac = function BsDropdownContainerComponent_Factory(t) {\n    return new (t || BsDropdownContainerComponent)(i0.ɵɵdirectiveInject(i1.BsDropdownState), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.AnimationBuilder));\n  };\n\n  BsDropdownContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BsDropdownContainerComponent,\n    selectors: [[\"bs-dropdown-container\"]],\n    hostAttrs: [2, \"display\", \"block\", \"position\", \"absolute\", \"z-index\", \"1040\"],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 9,\n    consts: [[3, \"ngClass\"]],\n    template: function BsDropdownContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"dropup\", ctx.direction === \"up\")(\"show\", ctx.isOpen)(\"open\", ctx.isOpen);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.direction === \"down\"));\n      }\n    },\n    directives: [i3.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BsDropdownContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}