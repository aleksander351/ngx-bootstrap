{"ast":null,"code":"import { DemoPopoverAdaptivePositionComponent } from './demos/adaptive-position/adaptive-position';\nimport { DemoPopoverBasicComponent } from './demos/basic/basic';\nimport { DemoPopoverByIsOpenPropComponent } from './demos/trigger-by-isopen-property/trigger-by-isopen-property';\nimport { DemoPopoverClassComponent } from './demos/class/class';\nimport { DemoPopoverConfigComponent } from './demos/config/config';\nimport { DemoPopoverContainerComponent } from './demos/container/container';\nimport { DemoPopoverContextComponent } from './demos/popover-context/popover-context';\nimport { DemoPopoverCustomContentComponent } from './demos/custom-content/custom-content';\nimport { DemoPopoverDelayComponent } from './demos/delay/delay';\nimport { DemoPopoverDismissComponent } from './demos/dismiss/dismiss';\nimport { DemoPopoverDynamicComponent } from './demos/dynamic/dynamic';\nimport { DemoPopoverDynamicHtmlComponent } from './demos/dynamic-html/dynamic-html';\nimport { DemoPopoverEventsComponent } from './demos/events/events';\nimport { DemoPopoverOutsideClickComponent } from './demos/outside-click/outside-click';\nimport { DemoPopoverPlacementComponent } from './demos/placement/placement';\nimport { DemoPopoverStylingLocalComponent } from './demos/styling-local/styling-local';\nimport { DemoPopoverTriggersCustomComponent } from './demos/triggers-custom/triggers-custom';\nimport { DemoPopoverTriggersManualComponent } from './demos/triggers-manual/triggers-manual';\nimport { DemoPopoverCornerPlacementComponent } from './demos/corner-placement/corner-placement';\nimport { ExamplesComponent } from '@ngx-bootstrap-doc/docs';\nimport { ApiSectionsComponent } from '@ngx-bootstrap-doc/docs';\nimport { NgApiDocComponent, NgApiDocConfigComponent } from '@ngx-bootstrap-doc/docs';\nexport const demoComponentContent = [{\n  name: 'Overview',\n  anchor: 'overview',\n  tabName: 'overview',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Basic',\n    anchor: 'basic',\n    component: require('!!raw-loader!./demos/basic/basic.ts'),\n    html: require('!!raw-loader!./demos/basic/basic.html'),\n    outlet: DemoPopoverBasicComponent\n  }, {\n    title: 'Placement',\n    anchor: 'placement',\n    component: require('!!raw-loader!./demos/placement/placement.ts'),\n    html: require('!!raw-loader!./demos/placement/placement.html'),\n    description: `<p>Four base positioning options are available: <code>top</code>, <code>right</code>,\n        <code>bottom</code>, and <code>left</code>.\n        Besides that, <code>auto</code> option may be used to detect a position that fits the component on screen.</p>`,\n    outlet: DemoPopoverPlacementComponent\n  }, {\n    title: 'Corner placement',\n    anchor: 'corner-placement',\n    description: `\n          <p>Placement property of a popover can contain \"corner placement\" specifier following the base positioning.\n          Thus, in addition to the four base positioning options, namely <code>top</code>, <code>right</code>,\n          <code>bottom</code>, and <code>left</code>, eight more positioning options are available: <code>top left</code>, <code>top right</code>,\n          <code>right top</code>, <code>right bottom</code>, <code>bottom right</code>, <code>bottom left</code>, <code>left bottom</code>, and <code>left top</code>.`,\n    component: require('!!raw-loader!./demos/corner-placement/corner-placement.ts'),\n    html: require('!!raw-loader!./demos/corner-placement/corner-placement.html'),\n    outlet: DemoPopoverCornerPlacementComponent\n  }, {\n    title: 'Disable adaptive position',\n    anchor: 'adaptive-position',\n    description: `\n          <p>You can disable adaptive position via <code>adaptivePosition</code> input or config option</p>\n        `,\n    component: require('!!raw-loader!./demos/adaptive-position/adaptive-position.ts'),\n    html: require('!!raw-loader!./demos/adaptive-position/adaptive-position.html'),\n    outlet: DemoPopoverAdaptivePositionComponent\n  }, {\n    title: 'Dismiss on next click',\n    anchor: 'popover-dismiss',\n    component: require('!!raw-loader!./demos/dismiss/dismiss.ts'),\n    html: require('!!raw-loader!./demos/dismiss/dismiss.html'),\n    description: `<p>Use the <code>focus</code> trigger to dismiss popovers on the next click that the\n      user makes.</p>`,\n    outlet: DemoPopoverDismissComponent\n  }, {\n    title: 'Dynamic content',\n    anchor: 'dynamic-content',\n    component: require('!!raw-loader!./demos/dynamic/dynamic.ts'),\n    html: require('!!raw-loader!./demos/dynamic/dynamic.html'),\n    description: `<p>Pass a string as popover content.</p>`,\n    outlet: DemoPopoverDynamicComponent\n  }, {\n    title: 'Custom content template',\n    anchor: 'custom-content-template',\n    component: require('!!raw-loader!./demos/custom-content/custom-content.ts'),\n    html: require('!!raw-loader!./demos/custom-content/custom-content.html'),\n    description: `<p>Create <code>&lt;ng-template #myId></code> with any html allowed by Angular,\n        and provide template ref <code>[popover]=\"myId\"</code> as popover content.</p>`,\n    outlet: DemoPopoverCustomContentComponent\n  }, {\n    title: 'Dynamic Html',\n    anchor: 'dynamic-html',\n    component: require('!!raw-loader!./demos/dynamic-html/dynamic-html.ts'),\n    html: require('!!raw-loader!./demos/dynamic-html/dynamic-html.html'),\n    description: `<p>By using <code>[innerHtml]</code> inside <code>ng-template</code> you can display any dynamic html</p>`,\n    outlet: DemoPopoverDynamicHtmlComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container-body',\n    component: require('!!raw-loader!./demos/container/container.ts'),\n    html: require('!!raw-loader!./demos/container/container.html'),\n    description: `<p>When you have any styles on a parent element that interfere with a popover,\n        you’ll want to specify a <code>container=\"body\"</code> so that the popover’s HTML will be\n        appended to body. This will help to avoid rendering problems in more complex components\n        (like input groups, button groups, etc) or inside elements with <code>overflow: hidden</code></p>`,\n    outlet: DemoPopoverContainerComponent\n  }, {\n    title: 'Visibility events',\n    anchor: 'events',\n    component: require('!!raw-loader!./demos/events/events.ts'),\n    html: require('!!raw-loader!./demos/events/events.html'),\n    outlet: DemoPopoverEventsComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'config-defaults',\n    component: require('!!raw-loader!./demos/config/config.ts'),\n    html: require('!!raw-loader!./demos/config/config.html'),\n    outlet: DemoPopoverConfigComponent\n  }, {\n    title: 'Outside click',\n    anchor: 'outside-click',\n    component: require('!!raw-loader!./demos/outside-click/outside-click.ts'),\n    html: require('!!raw-loader!./demos/outside-click/outside-click.html'),\n    outlet: DemoPopoverOutsideClickComponent\n  }, {\n    title: 'Custom triggers',\n    anchor: 'triggers-custom',\n    component: require('!!raw-loader!./demos/triggers-custom/triggers-custom.ts'),\n    html: require('!!raw-loader!./demos/triggers-custom/triggers-custom.html'),\n    outlet: DemoPopoverTriggersCustomComponent\n  }, {\n    title: 'Manual triggering',\n    anchor: 'triggers-manual',\n    component: require('!!raw-loader!./demos/triggers-manual/triggers-manual.ts'),\n    html: require('!!raw-loader!./demos/triggers-manual/triggers-manual.html'),\n    description: `<p>This demo shows manipulating popover by <code>show</code>,\n        <code>hide</code> and <code>toggle</code> methods</p>`,\n    outlet: DemoPopoverTriggersManualComponent\n  }, {\n    title: 'Trigger by isOpen property',\n    anchor: 'trigger-by-isopen-property',\n    component: require('!!raw-loader!./demos/trigger-by-isopen-property/trigger-by-isopen-property.ts'),\n    html: require('!!raw-loader!./demos/trigger-by-isopen-property/trigger-by-isopen-property.html'),\n    description: `<p>You can show/hide popover by switching <code>isOpen</code> property</p>`,\n    outlet: DemoPopoverByIsOpenPropComponent\n  }, {\n    title: 'Component level styling',\n    anchor: 'styling-local',\n    component: require('!!raw-loader!./demos/styling-local/styling-local.ts'),\n    html: require('!!raw-loader!./demos/styling-local/styling-local.html'),\n    outlet: DemoPopoverStylingLocalComponent\n  }, {\n    title: 'Custom class',\n    anchor: 'popover-custom-class',\n    component: require('!!raw-loader!./demos/class/class.ts'),\n    html: require('!!raw-loader!./demos/class/class.html'),\n    outlet: DemoPopoverClassComponent\n  }, {\n    title: 'Popover context',\n    anchor: 'popover-context',\n    component: require('!!raw-loader!./demos/popover-context/popover-context.ts'),\n    html: require('!!raw-loader!./demos/popover-context/popover-context.html'),\n    outlet: DemoPopoverContextComponent\n  }, {\n    title: 'Popover with delay',\n    anchor: 'popover-delay',\n    component: require('!!raw-loader!./demos/delay/delay.ts'),\n    html: require('!!raw-loader!./demos/delay/delay.html'),\n    description: `<p>Click on the button to see popover delayed for 0,5 second </p>`,\n    outlet: DemoPopoverDelayComponent\n  }]\n}, {\n  name: 'Installation',\n  anchor: 'api-reference',\n  tabName: 'api',\n  usage: require('!!raw-loader!./docs/usage.md'),\n  importInfo: '<span class=\"pln\">ng add ngx</span><span class=\"pun\">-</span><span class=\"pln\">bootstrap </span> --component <span class=\"pln\">popover</span>',\n  outlet: ApiSectionsComponent,\n  content: [{\n    title: 'PopoverDirective',\n    anchor: 'popover-directive',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'PopoverConfig',\n    anchor: 'popover-config',\n    outlet: NgApiDocConfigComponent\n  }]\n}, {\n  name: 'Examples',\n  anchor: 'examples',\n  tabName: 'examples',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Basic',\n    anchor: 'basic-ex',\n    outlet: DemoPopoverBasicComponent\n  }, {\n    title: 'Placement',\n    anchor: 'placement-ex',\n    outlet: DemoPopoverPlacementComponent\n  }, {\n    title: 'Corner placement',\n    anchor: 'corner-placement-ex',\n    outlet: DemoPopoverCornerPlacementComponent\n  }, {\n    title: 'Disable adaptive position',\n    anchor: 'adaptive-position-ex',\n    outlet: DemoPopoverAdaptivePositionComponent\n  }, {\n    title: 'Dismiss on next click',\n    anchor: 'popover-dismiss-ex',\n    outlet: DemoPopoverDismissComponent\n  }, {\n    title: 'Dynamic content',\n    anchor: 'dynamic-content-ex',\n    outlet: DemoPopoverDynamicComponent\n  }, {\n    title: 'Custom content template',\n    anchor: 'custom-content-template-ex',\n    outlet: DemoPopoverCustomContentComponent\n  }, {\n    title: 'Dynamic Html',\n    anchor: 'dynamic-html-ex',\n    outlet: DemoPopoverDynamicHtmlComponent\n  }, {\n    title: 'Append to body',\n    anchor: 'container-body-ex',\n    outlet: DemoPopoverContainerComponent\n  }, {\n    title: 'Visibility events',\n    anchor: 'events-ex',\n    outlet: DemoPopoverEventsComponent\n  }, {\n    title: 'Configuring defaults',\n    anchor: 'config-defaults-ex',\n    outlet: DemoPopoverConfigComponent\n  }, {\n    title: 'Outside click',\n    anchor: 'outside-click-ex',\n    outlet: DemoPopoverOutsideClickComponent\n  }, {\n    title: 'Custom triggers',\n    anchor: 'triggers-custom-ex',\n    outlet: DemoPopoverTriggersCustomComponent\n  }, {\n    title: 'Manual triggering',\n    anchor: 'triggers-manual-ex',\n    outlet: DemoPopoverTriggersManualComponent\n  }, {\n    title: 'Trigger by isOpen property',\n    anchor: 'trigger-by-isopen-property-ex',\n    outlet: DemoPopoverByIsOpenPropComponent\n  }, {\n    title: 'Component level styling',\n    anchor: 'styling-local-ex',\n    outlet: DemoPopoverStylingLocalComponent\n  }, {\n    title: 'Custom class',\n    anchor: 'popover-custom-class-ex',\n    outlet: DemoPopoverClassComponent\n  }, {\n    title: 'Popover context',\n    anchor: 'popover-context-ex',\n    outlet: DemoPopoverContextComponent\n  }, {\n    title: 'Popover with delay',\n    anchor: 'popover-delay-ex',\n    outlet: DemoPopoverDelayComponent\n  }]\n}];","map":null,"metadata":{},"sourceType":"module"}