{"ast":null,"code":"export class LinkedList {\n  constructor() {\n    this.length = 0;\n    this.asArray = []; // Array methods overriding END\n  }\n\n  get(position) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      return void 0;\n    }\n\n    let current = this.head;\n\n    for (let index = 0; index < position; index++) {\n      current = current === null || current === void 0 ? void 0 : current.next;\n    }\n\n    return current === null || current === void 0 ? void 0 : current.value;\n  }\n\n  add(value, position = this.length) {\n    if (position < 0 || position > this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    const node = {\n      value,\n      next: undefined,\n      previous: undefined\n    };\n\n    if (this.length === 0) {\n      this.head = node;\n      this.tail = node;\n      this.current = node;\n    } else {\n      if (position === 0 && this.head) {\n        // first node\n        node.next = this.head;\n        this.head.previous = node;\n        this.head = node;\n      } else if (position === this.length && this.tail) {\n        // last node\n        this.tail.next = node;\n        node.previous = this.tail;\n        this.tail = node;\n      } else {\n        // node in middle\n        const currentPreviousNode = this.getNode(position - 1);\n        const currentNextNode = currentPreviousNode === null || currentPreviousNode === void 0 ? void 0 : currentPreviousNode.next;\n\n        if (currentPreviousNode && currentNextNode) {\n          currentPreviousNode.next = node;\n          currentNextNode.previous = node;\n          node.previous = currentPreviousNode;\n          node.next = currentNextNode;\n        }\n      }\n    }\n\n    this.length++;\n    this.createInternalArrayRepresentation();\n  }\n\n  remove(position = 0) {\n    var _a;\n\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    if (position === 0 && this.head) {\n      // first node\n      this.head = this.head.next;\n\n      if (this.head) {\n        // there is no second node\n        this.head.previous = undefined;\n      } else {\n        // there is no second node\n        this.tail = undefined;\n      }\n    } else if (position === this.length - 1 && ((_a = this.tail) === null || _a === void 0 ? void 0 : _a.previous)) {\n      // last node\n      this.tail = this.tail.previous;\n      this.tail.next = undefined;\n    } else {\n      // middle node\n      const removedNode = this.getNode(position);\n\n      if ((removedNode === null || removedNode === void 0 ? void 0 : removedNode.next) && removedNode.previous) {\n        removedNode.next.previous = removedNode.previous;\n        removedNode.previous.next = removedNode.next;\n      }\n    }\n\n    this.length--;\n    this.createInternalArrayRepresentation();\n  }\n\n  set(position, value) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    const node = this.getNode(position);\n\n    if (node) {\n      node.value = value;\n      this.createInternalArrayRepresentation();\n    }\n  }\n\n  toArray() {\n    return this.asArray;\n  }\n\n  findAll(fn) {\n    let current = this.head;\n    const result = [];\n\n    if (!current) {\n      return result;\n    }\n\n    for (let index = 0; index < this.length; index++) {\n      if (!current) {\n        return result;\n      }\n\n      if (fn(current.value, index)) {\n        result.push({\n          index,\n          value: current.value\n        });\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  } // Array methods overriding start\n\n\n  push(...args) {\n    args.forEach(arg => {\n      this.add(arg);\n    });\n    return this.length;\n  }\n\n  pop() {\n    if (this.length === 0) {\n      return;\n    }\n\n    const last = this.tail;\n    this.remove(this.length - 1);\n    return last === null || last === void 0 ? void 0 : last.value;\n  }\n\n  unshift(...args) {\n    args.reverse();\n    args.forEach(arg => {\n      this.add(arg, 0);\n    });\n    return this.length;\n  }\n\n  shift() {\n    var _a;\n\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const lastItem = (_a = this.head) === null || _a === void 0 ? void 0 : _a.value;\n    this.remove();\n    return lastItem;\n  }\n\n  forEach(fn) {\n    let current = this.head;\n\n    for (let index = 0; index < this.length; index++) {\n      if (!current) {\n        return;\n      }\n\n      fn(current.value, index);\n      current = current.next;\n    }\n  }\n\n  indexOf(value) {\n    let current = this.head;\n    let position = -1;\n\n    for (let index = 0; index < this.length; index++) {\n      if (!current) {\n        return position;\n      }\n\n      if (current.value === value) {\n        position = index;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return position;\n  }\n\n  some(fn) {\n    let current = this.head;\n    let result = false;\n\n    while (current && !result) {\n      if (fn(current.value)) {\n        result = true;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  }\n\n  every(fn) {\n    let current = this.head;\n    let result = true;\n\n    while (current && result) {\n      if (!fn(current.value)) {\n        result = false;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  }\n\n  toString() {\n    return '[Linked List]';\n  }\n\n  find(fn) {\n    let current = this.head;\n\n    for (let index = 0; index < this.length; index++) {\n      if (!current) {\n        return;\n      }\n\n      if (fn(current.value, index)) {\n        return current.value;\n      }\n\n      current = current.next;\n    }\n  }\n\n  findIndex(fn) {\n    let current = this.head;\n\n    for (let index = 0; index < this.length; index++) {\n      if (!current) {\n        return -1;\n      }\n\n      if (fn(current.value, index)) {\n        return index;\n      }\n\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  getNode(position) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    let current = this.head;\n\n    for (let index = 0; index < position; index++) {\n      current = current === null || current === void 0 ? void 0 : current.next;\n    }\n\n    return current;\n  }\n\n  createInternalArrayRepresentation() {\n    const outArray = [];\n    let current = this.head;\n\n    while (current) {\n      outArray.push(current.value);\n      current = current.next;\n    }\n\n    this.asArray = outArray;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}