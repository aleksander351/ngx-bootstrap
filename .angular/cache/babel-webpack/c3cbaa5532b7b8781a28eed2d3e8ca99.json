{"ast":null,"code":"import { ComponentRef, TemplateRef, EventEmitter, Renderer2, RendererFactory2 } from '@angular/core';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { ModalBackdropComponent } from './modal-backdrop.component';\nimport { ModalContainerComponent } from './modal-container.component';\nimport { CLASS_NAME, modalConfigDefaults, ModalOptions, TRANSITION_DURATIONS, MODAL_CONFIG_DEFAULT_OVERRIDE } from './modal-options.class';\nimport { BsModalRef } from './bs-modal-ref.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/component-loader\";\nimport * as i2 from \"./modal-options.class\";\nlet currentId = 1;\nexport let BsModalService = /*#__PURE__*/(() => {\n  class BsModalService {\n    constructor(rendererFactory, clf, modalDefaultOption) {\n      this.clf = clf;\n      this.modalDefaultOption = modalDefaultOption;\n      this.onShow = new EventEmitter();\n      this.onShown = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onHidden = new EventEmitter();\n      this.isBodyOverflowing = false;\n      this.originalBodyPadding = 0;\n      this.scrollbarWidth = 0;\n      this.modalsCount = 0;\n      this.loaders = [];\n      this._backdropLoader = this.clf.createLoader();\n      this._renderer = rendererFactory.createRenderer(null, null);\n      this.config = modalDefaultOption ? Object.assign({}, modalConfigDefaults, modalDefaultOption) : modalConfigDefaults;\n    }\n    /** Shows a modal */\n\n\n    show( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    content, config) {\n      this.modalsCount++;\n\n      this._createLoaders(); // must be different per every show() call\n\n\n      const id = (config === null || config === void 0 ? void 0 : config.id) || currentId++;\n      this.config = this.modalDefaultOption ? Object.assign({}, modalConfigDefaults, this.modalDefaultOption, config) : Object.assign({}, modalConfigDefaults, config);\n      this.config.id = id;\n\n      this._showBackdrop();\n\n      this.lastDismissReason = void 0;\n      return this._showModal(content);\n    }\n\n    hide(id) {\n      if (this.modalsCount === 1 || id == null) {\n        this._hideBackdrop();\n\n        this.resetScrollbar();\n      }\n\n      this.modalsCount = this.modalsCount >= 1 && id != null ? this.modalsCount - 1 : 0;\n      setTimeout(() => {\n        this._hideModal(id);\n\n        this.removeLoaders(id);\n      }, this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0);\n    }\n\n    _showBackdrop() {\n      const isBackdropEnabled = this.config.backdrop === true || this.config.backdrop === 'static';\n      const isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;\n\n      if (this.modalsCount === 1) {\n        this.removeBackdrop();\n\n        if (isBackdropEnabled && isBackdropInDOM) {\n          this._backdropLoader.attach(ModalBackdropComponent).to('body').show({\n            isAnimated: this.config.animated\n          });\n\n          this.backdropRef = this._backdropLoader._componentRef;\n        }\n      }\n    }\n\n    _hideBackdrop() {\n      if (!this.backdropRef) {\n        return;\n      }\n\n      this.backdropRef.instance.isShown = false;\n      const duration = this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0;\n      setTimeout(() => this.removeBackdrop(), duration);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    _showModal(content) {\n      var _a;\n\n      const modalLoader = this.loaders[this.loaders.length - 1];\n\n      if (this.config && this.config.providers) {\n        for (const provider of this.config.providers) {\n          modalLoader.provide(provider);\n        }\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      const bsModalRef = new BsModalRef();\n      const modalContainerRef = modalLoader.provide({\n        provide: ModalOptions,\n        useValue: this.config\n      }).provide({\n        provide: BsModalRef,\n        useValue: bsModalRef\n      }).attach(ModalContainerComponent).to('body');\n\n      bsModalRef.hide = () => {\n        var _a;\n\n        return (_a = modalContainerRef.instance) === null || _a === void 0 ? void 0 : _a.hide();\n      };\n\n      bsModalRef.setClass = newClass => {\n        if (modalContainerRef.instance) {\n          modalContainerRef.instance.config.class = newClass;\n        }\n      };\n\n      bsModalRef.onHidden = new EventEmitter();\n      bsModalRef.onHide = new EventEmitter();\n      this.copyEvent(modalLoader.onBeforeHide, bsModalRef.onHide);\n      this.copyEvent(modalLoader.onHidden, bsModalRef.onHidden); // call 'show' method after assign setClass in bsModalRef.\n      // it makes modal component's bsModalRef available to call setClass method\n\n      modalContainerRef.show({\n        content,\n        isAnimated: this.config.animated,\n        initialState: this.config.initialState,\n        bsModalService: this,\n        id: this.config.id\n      });\n\n      if (modalContainerRef.instance) {\n        modalContainerRef.instance.level = this.getModalsCount();\n        bsModalRef.content = modalLoader.getInnerComponent();\n        bsModalRef.id = (_a = modalContainerRef.instance.config) === null || _a === void 0 ? void 0 : _a.id;\n      }\n\n      return bsModalRef;\n    }\n\n    _hideModal(id) {\n      if (id != null) {\n        const indexToRemove = this.loaders.findIndex(loader => {\n          var _a;\n\n          return ((_a = loader.instance) === null || _a === void 0 ? void 0 : _a.config.id) === id;\n        });\n        const modalLoader = this.loaders[indexToRemove];\n\n        if (modalLoader) {\n          modalLoader.hide(id);\n        }\n      } else {\n        this.loaders.forEach(loader => {\n          if (loader.instance) {\n            loader.hide(loader.instance.config.id);\n          }\n        });\n      }\n    }\n\n    getModalsCount() {\n      return this.modalsCount;\n    }\n\n    setDismissReason(reason) {\n      this.lastDismissReason = reason;\n    }\n\n    removeBackdrop() {\n      this._renderer.removeClass(document.body, CLASS_NAME.OPEN);\n\n      this._renderer.setStyle(document.body, 'overflow-y', '');\n\n      this._backdropLoader.hide();\n\n      this.backdropRef = void 0;\n    }\n    /** Checks if the body is overflowing and sets scrollbar width */\n\n    /** @internal */\n\n\n    checkScrollbar() {\n      this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;\n      this.scrollbarWidth = this.getScrollbarWidth();\n    }\n\n    setScrollbar() {\n      if (!document) {\n        return;\n      }\n\n      this.originalBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right') || '0', 10);\n\n      if (this.isBodyOverflowing) {\n        document.body.style.paddingRight = `${this.originalBodyPadding + this.scrollbarWidth}px`;\n      }\n    }\n\n    resetScrollbar() {\n      document.body.style.paddingRight = `${this.originalBodyPadding}px`;\n    } // thx d.walsh\n\n\n    getScrollbarWidth() {\n      const scrollDiv = this._renderer.createElement('div');\n\n      this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);\n\n      this._renderer.appendChild(document.body, scrollDiv);\n\n      const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n      this._renderer.removeChild(document.body, scrollDiv);\n\n      return scrollbarWidth;\n    }\n\n    _createLoaders() {\n      const loader = this.clf.createLoader();\n      this.copyEvent(loader.onBeforeShow, this.onShow);\n      this.copyEvent(loader.onShown, this.onShown);\n      this.copyEvent(loader.onBeforeHide, this.onHide);\n      this.copyEvent(loader.onHidden, this.onHidden);\n      this.loaders.push(loader);\n    }\n\n    removeLoaders(id) {\n      if (id != null) {\n        const indexToRemove = this.loaders.findIndex(loader => {\n          var _a;\n\n          return ((_a = loader.instance) === null || _a === void 0 ? void 0 : _a.config.id) === id;\n        });\n\n        if (indexToRemove >= 0) {\n          this.loaders.splice(indexToRemove, 1);\n          this.loaders.forEach((loader, i) => {\n            if (loader.instance) {\n              loader.instance.level = i + 1;\n            }\n          });\n        }\n      } else {\n        this.loaders.splice(0, this.loaders.length);\n      }\n    }\n\n    copyEvent(from, to) {\n      from.subscribe(data => {\n        to.emit(this.lastDismissReason || data);\n      });\n    }\n\n  }\n\n  BsModalService.ɵfac = function BsModalService_Factory(t) {\n    return new (t || BsModalService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.ComponentLoaderFactory), i0.ɵɵinject(MODAL_CONFIG_DEFAULT_OVERRIDE, 8));\n  };\n\n  BsModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BsModalService,\n    factory: BsModalService.ɵfac,\n    providedIn: 'platform'\n  });\n  return BsModalService;\n})();","map":null,"metadata":{},"sourceType":"module"}