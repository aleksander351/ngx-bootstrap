{"ast":null,"code":"import { latinMap } from './latin-map';\nexport function latinize(str) {\n  if (!str) {\n    return '';\n  }\n\n  return str.replace(/[^A-Za-z0-9[\\] ]/g, function (a) {\n    return latinMap[a] || a;\n  });\n}\nexport function escapeRegexp(queryToEscape) {\n  // Regex: capture the whole query string and replace it with the string\n  // that will be used to match the results, for example if the capture is\n  // 'a' the result will be \\a\n  return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n}\nexport function tokenize(str, wordRegexDelimiters = ' ', phraseRegexDelimiters = '', delimitersForMultipleSearch) {\n  let result = [];\n\n  if (!delimitersForMultipleSearch) {\n    result = tokenizeWordsAndPhrases(str, wordRegexDelimiters, phraseRegexDelimiters);\n  } else {\n    const multipleSearchRegexStr = `([${delimitersForMultipleSearch}]+)`;\n    const delimitedTokens = str.split(new RegExp(multipleSearchRegexStr, 'g'));\n    const lastToken = delimitedTokens[delimitedTokens.length - 1];\n\n    if (lastToken > '') {\n      if (wordRegexDelimiters && phraseRegexDelimiters) {\n        result = tokenizeWordsAndPhrases(lastToken, wordRegexDelimiters, phraseRegexDelimiters);\n      } else {\n        result.push(lastToken);\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction tokenizeWordsAndPhrases(str, wordRegexDelimiters, phraseRegexDelimiters) {\n  const result = [];\n  const regexStr = `(?:[${phraseRegexDelimiters}])([^${phraseRegexDelimiters}]+)` + `(?:[${phraseRegexDelimiters}])|([^${wordRegexDelimiters}]+)`;\n  const preTokenized = str.split(new RegExp(regexStr, 'g'));\n  const preTokenizedLength = preTokenized.length;\n  let token;\n  const replacePhraseDelimiters = new RegExp(`[${phraseRegexDelimiters}]+`, 'g');\n\n  for (let i = 0; i < preTokenizedLength; i += 1) {\n    token = preTokenized[i];\n\n    if (token && token.length && token !== wordRegexDelimiters) {\n      result.push(token.replace(replacePhraseDelimiters, ''));\n    }\n  }\n\n  return result;\n} // eslint-disable-next-line\n\n\nexport function getValueFromObject(object, option) {\n  if (!option || typeof object !== 'object') {\n    return object.toString();\n  }\n\n  if (option.endsWith('()')) {\n    const functionName = option.slice(0, option.length - 2);\n    return object[functionName]().toString();\n  }\n\n  const properties = option.replace(/\\[(\\w+)\\]/g, '.$1').replace(/^\\./, '');\n  const propertiesArray = properties.split('.');\n\n  for (const property of propertiesArray) {\n    if (property in object) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      object = object[property];\n    }\n  }\n\n  if (!object) {\n    return '';\n  }\n\n  return object.toString();\n}","map":null,"metadata":{},"sourceType":"module"}