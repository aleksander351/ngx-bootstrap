{"ast":null,"code":"import { PopoverConfig } from 'ngx-bootstrap/popover';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/popover\"; // such override allows to keep some initial values\n\nexport function getPopoverConfig() {\n  return Object.assign(new PopoverConfig(), {\n    placement: 'right',\n    container: 'body',\n    triggers: 'focus',\n    delay: 500\n  });\n}\nexport let DemoPopoverConfigComponent = /*#__PURE__*/(() => {\n  class DemoPopoverConfigComponent {}\n\n  DemoPopoverConfigComponent.ɵfac = function DemoPopoverConfigComponent_Factory(t) {\n    return new (t || DemoPopoverConfigComponent)();\n  };\n\n  DemoPopoverConfigComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DemoPopoverConfigComponent,\n    selectors: [[\"demo-popover-config\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: PopoverConfig,\n      useFactory: getPopoverConfig\n    }])],\n    decls: 2,\n    vars: 0,\n    consts: [[\"type\", \"button\", \"popover\", \"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\", 1, \"btn\", \"btn-primary\"]],\n    template: function DemoPopoverConfigComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵtext(1, \" Preconfigured popover\\n\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i1.PopoverDirective],\n    encapsulation: 2\n  });\n  return DemoPopoverConfigComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}