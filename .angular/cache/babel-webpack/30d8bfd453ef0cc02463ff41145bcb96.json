{"ast":null,"code":"import { DemoModalServiceStaticComponent } from './demos/service-template/service-template';\nimport { DemoModalServiceFromComponent } from './demos/service-component/service-component';\nimport { DemoModalServiceNestedComponent } from './demos/service-nested/service-nested';\nimport { DemoModalServiceEventsComponent } from './demos/service-events/service-events';\nimport { DemoModalServiceDisableAnimationComponent } from './demos/service-options/disable-animation/disable-animation';\nimport { DemoModalServiceCustomCSSClassComponent } from './demos/service-options/custom-css-class/custom-css-class';\nimport { DemoModalServiceDisableEscClosingComponent } from './demos/service-options/disable-esc-closing/disable-esc-closing';\nimport { DemoModalServiceDisableBackdropComponent } from './demos/service-options/disable-backdrop/disable-backdrop';\nimport { DemoModalServiceConfirmWindowComponent } from './demos/service-confirm-window/service-confirm-window';\nimport { DemoModalServiceChangeClassComponent } from './demos/service-options/change-class/change-class';\nimport { DemoModalStaticComponent } from './demos/static/static';\nimport { DemoModalSizesComponent } from './demos/sizes/sizes';\nimport { DemoModalChildComponent } from './demos/child/child';\nimport { DemoModalNestedComponent } from './demos/nested/nested';\nimport { DemoModalEventsComponent } from './demos/events/events';\nimport { DemoAutoShownModalComponent } from './demos/auto-shown/auto-shown';\nimport { DemoAccessibilityComponent } from './demos/accessibility/accessibility';\nimport { DemoModalWithPopupsComponent } from './demos/modal-with-popups/modal-with-popups';\nimport { ExamplesComponent } from '@ngx-bootstrap-doc/docs';\nimport { ApiSectionsComponent } from '@ngx-bootstrap-doc/docs';\nimport { NgApiDocComponent, NgApiDocClassComponent, NgApiDocConfigComponent } from '@ngx-bootstrap-doc/docs';\nimport { DemoModalScrollingLongContentComponent } from './demos/scrolling-long-content/scrolling-long-content';\nimport { DemoModalRefEventsComponent } from './demos/modal-ref-events/modal-ref-events';\nimport { DemoModalServiceWithInterceptorComponent } from './demos/service-interceptor/service-interceptor';\nexport const demoComponentContent = [{\n  name: 'Overview',\n  anchor: 'overview',\n  tabName: 'overview',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Service examples',\n    anchor: 'service-section',\n    description: `<p>Open a modal from service.</p>\n      <p>To be able to open modals from service, inject <code>BsModalService</code> to your constructor.<br>Then, call\n      <code>.show()</code> method of modal service. Pass a <code>TemplateRef</code> or a component as a first argument and\n      config as a second (optionally). <br> <code>.show()</code> method returns an instance of <code>BsModalRef</code>\n      class with <code>.hide()</code> method and <code>content</code> property where you'll find a component\n      which you've passed to service.</p>`\n  }, {\n    title: 'Template',\n    anchor: 'service-template',\n    component: require('!!raw-loader!./demos/service-template/service-template.ts'),\n    html: require('!!raw-loader!./demos/service-template/service-template.html'),\n    outlet: DemoModalServiceStaticComponent\n  }, {\n    title: 'Component',\n    anchor: 'service-component',\n    component: require('!!raw-loader!./demos/service-component/service-component.ts'),\n    html: require('!!raw-loader!./demos/service-component/service-component.html'),\n    description: `<p>Creating a modal with component just as easy as it is with template. Just pass your component\n          in <code>.show()</code> method as in example, and don't forget to include your component to\n          <code>entryComponents</code> of your <code>NgModule</code><br> If you passed a component\n          to <code>.show()</code> you can get access to opened modal by injecting <code>BsModalRef</code>. Also you can pass data\n          in your modal by adding <code>initialState</code> field in config. See example for more info</p>`,\n    outlet: DemoModalServiceFromComponent\n  }, {\n    title: 'Nested',\n    anchor: 'service-nested',\n    component: require('!!raw-loader!./demos/service-nested/service-nested.ts'),\n    html: require('!!raw-loader!./demos/service-nested/service-nested.html'),\n    description: `<p>Nested modals are supported</p>`,\n    outlet: DemoModalServiceNestedComponent\n  }, {\n    title: 'Scrolling long content',\n    anchor: 'scrolling-long-content',\n    component: require('!!raw-loader!./demos/scrolling-long-content/scrolling-long-content.ts'),\n    html: require('!!raw-loader!./demos/scrolling-long-content/scrolling-long-content.html'),\n    outlet: DemoModalScrollingLongContentComponent\n  }, {\n    title: 'Events',\n    anchor: 'service-events',\n    component: require('!!raw-loader!./demos/service-events/service-events.ts'),\n    html: require('!!raw-loader!./demos/service-events/service-events.html'),\n    description: `\n          <p>Modal service events. Modal service exposes 4 events: <code>onShow</code>, <code>onShown</code>,\n          <code>onHide</code>, <code>onHidden</code>.\n          See usage example below.</p>\n          <p><code>onHide</code> and <code>onHidden</code> events emit dismiss reason. Possible values are\n          <code>backdrop-click</code>, <code>esc</code> or <code>{id: number | string}</code> if modal was closed by direct call of\n          <code>hide()</code> method</p>`,\n    outlet: DemoModalServiceEventsComponent\n  }, {\n    title: 'ModalRef Events',\n    anchor: 'modal-ref-events',\n    component: require('!!raw-loader!./demos/modal-ref-events/modal-ref-events.ts'),\n    html: require('!!raw-loader!./demos/modal-ref-events/modal-ref-events.html'),\n    description: `\n          <p>Modal ref events. ModalRef exposes 2 events: <code>onHide</code> and <code>onHidden</code>. Note,\n          <code>onShow</code> and <code>onShown</code> are not options because they have already fired by the time\n          the ModalRef is created.\n          See usage example below.</p>\n          <p><code>onHide</code> and <code>onHidden</code> events emit dismiss reason. Possible values are\n          <code>backdrop-click</code>, <code>esc</code> or <code>{id: number | string}</code> if modal was closed by direct call of\n          <code>hide()</code> method</p>`,\n    outlet: DemoModalRefEventsComponent\n  }, {\n    title: 'Confirm Window',\n    anchor: 'confirm-window',\n    component: require('!!raw-loader!./demos/service-confirm-window/service-confirm-window.ts'),\n    html: require('!!raw-loader!./demos/service-confirm-window/service-confirm-window.html'),\n    description: `<p>Modal with opportunity to <code>confirm</code> or <code>decline</code>.</p>`,\n    outlet: DemoModalServiceConfirmWindowComponent\n  }, {\n    title: 'Ð¡ustom css class',\n    anchor: 'service-custom-css-class',\n    component: require('!!raw-loader!./demos/service-options/custom-css-class/custom-css-class.ts'),\n    html: require('!!raw-loader!./demos/service-options/custom-css-class/custom-css-class.html'),\n    description: `<p>There is possibility to add custom css class to a modal.\n          See the demo below to learn how to use it</p>`,\n    outlet: DemoModalServiceCustomCSSClassComponent\n  }, {\n    title: 'Animation option',\n    anchor: 'service-disable-animation',\n    component: require('!!raw-loader!./demos/service-options/disable-animation/disable-animation.ts'),\n    html: require('!!raw-loader!./demos/service-options/disable-animation/disable-animation.html'),\n    description: `<p>There is animation option that you can configure.</p>`,\n    outlet: DemoModalServiceDisableAnimationComponent\n  }, {\n    title: 'Esc closing option',\n    anchor: 'service-disable-esc-closing',\n    component: require('!!raw-loader!./demos/service-options/disable-esc-closing/disable-esc-closing.ts'),\n    html: require('!!raw-loader!./demos/service-options/disable-esc-closing/disable-esc-closing.html'),\n    description: `<p>There is closing by Esc button option that you can configure.</p>`,\n    outlet: DemoModalServiceDisableEscClosingComponent\n  }, {\n    title: 'Modal window with tooltip and popover',\n    anchor: 'modal-with-popups',\n    component: require('!!raw-loader!./demos/modal-with-popups/modal-with-popups.ts'),\n    html: require('!!raw-loader!./demos/modal-with-popups/modal-with-popups.html'),\n    description: `<p><code>Tooltips</code> and <code>popovers</code> can be placed within modals as needed. When modals are closed, any <code>tooltips</code> and <code>popovers</code> within are also automatically dismissed.</p>`,\n    outlet: DemoModalWithPopupsComponent\n  }, {\n    title: 'Backdrop options',\n    anchor: 'service-disable-backdrop',\n    component: require('!!raw-loader!./demos/service-options/disable-backdrop/disable-backdrop.ts'),\n    html: require('!!raw-loader!./demos/service-options/disable-backdrop/disable-backdrop.html'),\n    description: `<p>There is backdrop options that you can configure.</p>`,\n    outlet: DemoModalServiceDisableBackdropComponent\n  }, {\n    title: 'Change class',\n    anchor: 'change-class',\n    component: require('!!raw-loader!./demos/service-options/change-class/change-class.ts'),\n    html: require('!!raw-loader!./demos/service-options/change-class/change-class.html'),\n    description: `<p>Calling setClass method to change modal's window class</p>`,\n    outlet: DemoModalServiceChangeClassComponent\n  }, {\n    title: 'Close interceptor',\n    anchor: 'service-with-interceptor',\n    component: require('!!raw-loader!./demos/service-interceptor/service-interceptor.ts'),\n    html: require('!!raw-loader!./demos/service-interceptor/service-interceptor.html'),\n    description: `<p>When opening a modal with a component, you can provide an interceptor which will be triggered\n          whenever the modal try to close, allowing you to block the disappearance of a modal.</p>`,\n    outlet: DemoModalServiceWithInterceptorComponent\n  }, {\n    title: 'Directive examples',\n    anchor: 'directive-section',\n    description: `<p>Also you can use directive instead of service. See the demos below </p>`\n  }, {\n    title: 'Static modal',\n    anchor: 'directive-static',\n    component: require('!!raw-loader!./demos/static/static.ts'),\n    html: require('!!raw-loader!./demos/static/static.html'),\n    outlet: DemoModalStaticComponent\n  }, {\n    title: 'Optional sizes',\n    anchor: 'directive-sizes',\n    component: require('!!raw-loader!./demos/sizes/sizes.ts'),\n    html: require('!!raw-loader!./demos/sizes/sizes.html'),\n    outlet: DemoModalSizesComponent\n  }, {\n    title: 'Child modal',\n    anchor: 'directive-child',\n    component: require('!!raw-loader!./demos/child/child.ts'),\n    html: require('!!raw-loader!./demos/child/child.html'),\n    description: `<p>Control modal from parent component</p>`,\n    outlet: DemoModalChildComponent\n  }, {\n    title: 'Nested modals',\n    anchor: 'directive-nested',\n    component: require('!!raw-loader!./demos/nested/nested.ts'),\n    html: require('!!raw-loader!./demos/nested/nested.html'),\n    description: `<p>Open a modal from another modal</p>`,\n    outlet: DemoModalNestedComponent\n  }, {\n    title: 'Modal events',\n    anchor: 'directive-events',\n    component: require('!!raw-loader!./demos/events/events.ts'),\n    html: require('!!raw-loader!./demos/events/events.html'),\n    description: `<p><code>ModalDirective</code> exposes 4 events: <code>onShow</code>, <code>onShown</code>,\n          <code>onHide</code>, <code>onHidden</code>. See usage example below.<br>\n          <code>$event</code> is an instance of <code>ModalDirective</code>. There you may\n          find some useful properties like <code>isShown</code>, <code>dismissReason</code>, etc.\n          <br>For example, you may want to know which one of user's actions caused closing of a modal.\n          Just get the value of <code>dismissReason</code>,<br> possible values are <code>backdrop-click</code>,\n          <code>esc</code> or <code>null</code> if modal was closed by direct call of <code>hide()</code> method</p>`,\n    outlet: DemoModalEventsComponent\n  }, {\n    title: 'Auto shown modal',\n    anchor: 'directive-auto-shown',\n    component: require('!!raw-loader!./demos/auto-shown/auto-shown.ts'),\n    html: require('!!raw-loader!./demos/auto-shown/auto-shown.html'),\n    description: `\n          <p>Show modal right after it has been initialized. This allows you to keep DOM clean by only\n          appending visible modals to the DOM using <code>*ngIf</code> directive.</p>\n          <p>It can also be useful if you want your modal component to perform some initialization operations, but\n          want to defer that until user actually sees modal content. I.e. for a \"Select e-mail recipient\" modal\n          you might want to defer recipient list loading until the modal is shown.</p>`,\n    outlet: DemoAutoShownModalComponent\n  }, {\n    title: 'Accessibility',\n    anchor: 'accessibility',\n    component: require('!!raw-loader!./demos/accessibility/accessibility.ts'),\n    html: require('!!raw-loader!./demos/accessibility/accessibility.html'),\n    description: `\n        <p>\n          Be sure to add <code class=\"highlighter-rouge\">id=\"\"</code> attribute to your title and description\n          in the template to make your modal works according to accessibility. The <code class=\"highlighter-rouge\">aria-labelledby</code>\n          attribute establishes relationships between the modal and its title (only if the title has id attribute). The element\n          containing the modal's description is referenced by <code class=\"highlighter-rouge\">aria-describedby</code> attribute.\n          The dialog does not need <code class=\"highlighter-rouge\">aria-describedby</code> since there is no static\n          text that describes it.\n        </p>\n        <p>\n        Use modal options to set <code class=\"highlighter-rouge\">aria-labelledby</code> and\n        <code class=\"highlighter-rouge\">aria-describedby</code> attributes.\n        </p>\n        `,\n    outlet: DemoAccessibilityComponent\n  }]\n}, {\n  name: 'Installation',\n  anchor: 'api-reference',\n  tabName: 'api',\n  outlet: ApiSectionsComponent,\n  usage: require('!!raw-loader!./docs/usage.md'),\n  importInfo: '<span class=\"pln\">ng add ngx</span><span class=\"pun\">-</span><span class=\"pln\">bootstrap </span> --component <span class=\"pln\">modals</span>',\n  content: [{\n    title: 'ModalDirective',\n    anchor: 'modal-directive',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'ModalBackdropComponent',\n    anchor: 'modal-backdrop-component',\n    outlet: NgApiDocComponent\n  }, {\n    title: 'BsModalService',\n    anchor: 'bs-modal-service',\n    outlet: NgApiDocClassComponent\n  }, {\n    title: 'BsModalRef',\n    anchor: 'bs-modal-ref',\n    outlet: NgApiDocClassComponent\n  }, {\n    title: 'ModalOptions',\n    anchor: 'modal-options',\n    outlet: NgApiDocConfigComponent\n  }]\n}, {\n  name: 'Examples',\n  anchor: 'examples',\n  tabName: 'examples',\n  outlet: ExamplesComponent,\n  content: [{\n    title: 'Template',\n    anchor: 'service-template-ex',\n    outlet: DemoModalServiceStaticComponent\n  }, {\n    title: 'Component',\n    anchor: 'service-component-ex',\n    outlet: DemoModalServiceFromComponent\n  }, {\n    title: 'Nested',\n    anchor: 'service-nested-ex',\n    outlet: DemoModalServiceNestedComponent\n  }, {\n    title: 'Scrolling long content',\n    anchor: 'scrolling-long-content-ex',\n    outlet: DemoModalScrollingLongContentComponent\n  }, {\n    title: 'Events',\n    anchor: 'service-events-ex',\n    outlet: DemoModalServiceEventsComponent\n  }, {\n    title: 'ModalRef Events',\n    anchor: 'modal-ref-events-ex',\n    outlet: DemoModalRefEventsComponent\n  }, {\n    title: 'Confirm Window',\n    anchor: 'confirm-window-ex',\n    outlet: DemoModalServiceConfirmWindowComponent\n  }, {\n    title: 'Ð¡ustom css class',\n    anchor: 'service-custom-css-class-ex',\n    outlet: DemoModalServiceCustomCSSClassComponent\n  }, {\n    title: 'Animation option',\n    anchor: 'service-disable-animation-ex',\n    outlet: DemoModalServiceDisableAnimationComponent\n  }, {\n    title: 'Esc closing option',\n    anchor: 'service-disable-esc-closing-ex',\n    outlet: DemoModalServiceDisableEscClosingComponent\n  }, {\n    title: 'Modal window with tooltip and popover',\n    anchor: 'modal-with-popups-ex',\n    outlet: DemoModalWithPopupsComponent\n  }, {\n    title: 'Backdrop options',\n    anchor: 'service-disable-backdrop-ex',\n    outlet: DemoModalServiceDisableBackdropComponent\n  }, {\n    title: 'Change class',\n    anchor: 'change-class-ex',\n    outlet: DemoModalServiceChangeClassComponent\n  }, {\n    title: 'Close interceptor',\n    anchor: 'service-with-interceptor-ex',\n    outlet: DemoModalServiceWithInterceptorComponent\n  }, {\n    title: 'Static modal',\n    anchor: 'directive-static-ex',\n    outlet: DemoModalStaticComponent\n  }, {\n    title: 'Optional sizes',\n    anchor: 'directive-sizes-ex',\n    outlet: DemoModalSizesComponent\n  }, {\n    title: 'Child modal',\n    anchor: 'directive-child-ex',\n    outlet: DemoModalChildComponent\n  }, {\n    title: 'Nested modals',\n    anchor: 'directive-nested-ex',\n    outlet: DemoModalNestedComponent\n  }, {\n    title: 'Modal events',\n    anchor: 'directive-events-ex',\n    outlet: DemoModalEventsComponent\n  }, {\n    title: 'Auto shown modal',\n    anchor: 'directive-auto-shown-ex',\n    outlet: DemoAutoShownModalComponent\n  }]\n}];","map":null,"metadata":{},"sourceType":"module"}